#line 2 "caspconverter.cpp"

#line 4 "caspconverter.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 8
#define YY_END_OF_BUFFER 9
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[792] =
    {   0,
        0,    0,    0,    0,    0,    0,    9,    8,    5,    3,
        8,    1,    8,    8,    8,    4,    2,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    7,    7,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        7,    7,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        7,    7,    7,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    7,
        7,    0,    0,    7,    0,    7,    0,    0,    0,    0,
        0,    0,    0,    7,    7,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        7,    7,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    7,    7,    0,    7,    0,    0,    0,    0,    0,
        0,    0,    7,    7,    7,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    7,    7,    0,    0,

        0,    0,    0,    0,    6,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    7,    7,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    7,
        7,    0,    0,    0,    0,    7,    0,    0,    0,    0,
        0,    7,    7,    0,    0,    0,    7,    0,    0,    0,
        0,    7,    7,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    7,    7,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    7,    7,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    7,
        7,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    7,    7,    7,    0,    0,    0,    7,    7,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    7,    7,    7,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    7,    7,    7,    0,    0,    0,    0,    0,
        0,    0,    7,    7,    0,    0,    0,    0,    0,    0,
        0,    0,    7,    7,    7,    0,    0,    7,    7,    0,
        0,    0,    0,    0,    7,    7,    0,    0,    0,    0,

        0,    0,    7,    7,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    7,    7,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        7,    7,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    7,    7,    0,    0,    0,    0,    7,    7,
        0,    0,    0,    0,    0,    0,    0,    0,    7,    7,
        0,    0,    7,    0,    0,    0,    0,    0,    0,    0,
        7,    7,    7,    0,    0,    0,    7,    7,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    7,

        7,    7,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    7,    7,    7,    0,    0,    0,    0,    0,    0,
        7,    7,    0,    0,    0,    0,    0,    0,    0,    0,
        7,    7,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    7,    7,    0,    0,    0,    0,
        0,    0,    0,    0,    7,    7,    0,    0,    0,    0,
        0,    0,    7,    7,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    7,    7,    7,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    7,

        7,    0,    0,    0,    0,    0,    7,    7,    0,    0,
        0,    0,    0,    0,    7,    7,    0,    0,    7,    7,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    7,    7,    0,    0,    0,    0,    0,    7,    7,
        0,    0,    0,    0,    0,    7,    7,    7,    0,    0,
        0,    0,    0,    0,    0,    0,    7,    7,    7,    0,
        0,    0,    0,    0,    7,    7,    7,    0,    0,    7,
        7,    0,    0,    0,    0,    7,    7,    0,    0,    0,
        0,    0,    7,    7,    0,    0,    0,    0,    0,    0,
        0

    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    1,    6,    7,    1,    1,    8,
        9,   10,   10,   11,   12,   13,   10,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   13,    1,   15,
       16,   17,    1,    1,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
        1,    1,    1,    1,   19,    1,   20,   18,   18,   21,

       22,   18,   18,   18,   23,   18,   18,   18,   24,   25,
       26,   18,   18,   18,   18,   18,   18,   18,   18,   27,
       18,   28,    1,   13,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[29] =
    {   0,
        1,    2,    3,    1,    1,    4,    1,    5,    6,    7,
        8,    9,   10,   11,    1,   12,   12,   13,   14,   13,
       13,   13,   13,   13,   13,   13,   13,   13
    } ;

static yyconst flex_int16_t yy_base[877] =
    {   0,
        0,    0,   26,   27, 2359, 2339, 2337, 8972, 8972, 8972,
       12, 8972,   32,   45,   58, 8972, 8972, 2288,   15,   35,
       38,   59,   70,   79,   63,    0,   79,  106,  133, 2271,
     2265, 2266,   76,  128,  155,  107, 2257,  156,  173,  189,
     2252, 2243,   39,    0,   34,  206,  170, 2238, 2215, 2175,
        0, 2141, 2110, 2082,   36,  234,   52,  261,   79,    0,
        0,    0,   60,  279,  292,  102,  303,  113,  314,  319,
        0, 2075, 2047, 1997, 1994, 1992,  128,  346,  151,  357,
      362,    0,  136,  159,  182,  169,  262,   80, 2012,  373,
      400,  427,  189, 1986,  436,    0,  453,  257,  268,    0,

     1951, 1952, 1949,  270,  480,    0,  492,  274,  278,    0,
      176,  503,  530,  323, 1969, 1950,  287,  549,  351, 1948,
     1945, 1932,    0,  298, 1943,  577,  301, 1909,  321,    0,
      605,  276,  633,  341,  660, 1890, 1848, 1837,  364,    0,
      672,  699,  713,  343,  740,  368,  752,  138,  779,  401,
        0, 1862,  370,  797,  396,  808,  813,    0, 1859, 1841,
     1826,  400,  840,  867,  881,    0,  531,    0,  423,    0,
      780,  909,  937,    0,  433,  964,  973,  475,  990, 1011,
        0, 1805, 1800,    0,  700,    0,  537,    0,  533, 1039,
     1807, 1064, 1081,    0,  441, 1108, 1119, 1131, 1152,  655,

     1179,  695, 1190, 1195, 1223,  198,  735, 1791,  792,    0,
     1251,  737,  775,    0,    0,  809, 1279, 1763, 1306,  810,
     1320,    0,  787,  295, 1348,    0,  841, 1758, 1736, 1723,
        0,  816, 1717, 1376,  812, 1697,    0, 1403, 1677, 1431,
     1459, 1677,  836, 1487,    0,  840, 1515, 1543,  854, 1660,
     1113, 1671, 1669, 1638,    0,    0, 1570, 1597, 1611, 1639,
      959, 1666,    0, 1678,  970,  978,    0, 1622, 1013,    0,
     1706, 1733, 1747, 1017, 1774, 1180, 1786,    0, 1167, 1191,
     1813, 1193, 1830, 1857, 1593, 1019,  153, 1112, 1885, 1913,
        0, 1598, 1307, 1554, 1053, 1940, 1967, 1981, 2008, 1404,

     2036, 2064, 2092, 2120, 1542, 1069,  184, 1410, 2148, 2176,
     2204,    0, 2232, 2260, 2287, 2301, 1526, 1571, 2329, 2356,
     2384, 1405, 2411, 2428, 2456, 2484, 1154, 2512, 2540, 2567,
     2581, 1103, 2608, 2620,    0, 1734,    0, 1203, 2648, 2675,
     2703, 2731, 2759, 1514, 2786, 1404, 2797, 2809, 2829, 2857,
     2885, 2913, 2941, 1577, 1814,  286, 1491, 2968, 2972, 3000,
     3028, 3055, 3083, 1572, 1858, 3111, 3139, 3167, 1941, 3195,
     3223, 3251, 1968, 3279, 3306, 1458, 1435, 3333, 3337, 1861,
     3365, 3392, 3420, 1860, 2009, 3448, 3476, 3504, 3532, 3560,
       47, 3588, 3616, 1150, 1398, 2288, 1387, 3644, 3671, 1370,

        0, 1947,    0, 1593, 3699, 3726, 3754, 1942, 2357, 3782,
     3810, 1352, 2015, 3837, 3849, 3869, 1188, 2363, 3897, 3925,
     3953, 2412, 3981, 4008, 1319, 4036, 1290, 4064, 4091, 4105,
     4133, 4161, 4188, 4197, 4214, 4242, 2679, 4270, 4298, 4326,
     1262, 2568, 1257, 4354, 4381, 1222, 4409, 4437, 4465, 4493,
     2680,  332, 2792, 4521, 4549, 2973, 4577, 4605, 4633, 1199,
     3056, 1188, 4661, 4688, 1171, 4716, 4744, 4772, 4800, 2974,
     4828, 4856, 4883, 4897, 3059,  358, 1197, 4925, 4953, 4981,
     3307, 1169, 5009, 5036, 1154, 5064, 5092, 5119, 5133, 5161,
     1302,  299, 5189, 5217, 5245, 5273, 3062,  407, 5301, 5329,

     5356, 5384, 5412, 5440, 5468,  365, 5496, 5524, 1298, 1147,
     1142, 5551, 5578, 5592, 5620, 5648, 5676, 5704, 5732, 3310,
     3313,  441, 5760, 5788, 5816, 5843, 5857, 5885, 5913, 5941,
     5969, 5997, 3337, 3338,  485, 1137,    0, 6024, 6038, 6065,
     1660, 6077, 6105, 6133, 1400,  310, 6161, 6189, 6217, 6245,
     3393, 3396,  844, 6273, 6300, 6328, 3395, 3672, 6356, 6384,
     6412, 1117, 6439, 6443, 6471, 3678, 6499, 6527, 6555, 3727,
     6583, 6610, 1099,    0, 6638, 6665, 6692, 6706, 6733, 6760,
     6774, 6802, 6830, 6858,    0, 6885, 6899, 6926, 6935, 6952,
     6980, 1092, 3733, 7008,    0, 1073,    0, 4009, 1069, 1050,

     1016,    0, 1014, 7035, 7039, 1001, 7067,    0, 7095, 4092,
      996,  982,  966,    0,  427, 1769, 7123, 7151,  853,  967,
     4010,  936, 4193,  920,    0, 4011, 7179,  880, 1808,  878,
     7207,    0, 4385, 7235,    0, 4386,  855,  850,  816,    0,
     7263,    0,  776, 7291, 7319, 1559,  802, 4689,  811,  806,
      783,    0, 4692,  788, 4190,    0,  763,  745, 4884, 5040,
     7347, 7375, 4695,  724, 5037,    0,    0,  704, 5120,  683,
        0, 7402, 1571, 7430,    0,  870, 5039, 7458,    0,  678,
      665, 5357,  663,  644,  604,    0, 5360,  611, 5359,    0,
      588, 5552, 5579,  583, 5553,    0,    0, 1593, 7485, 7512,

     7526,  560, 5844, 6025,    0, 7553, 7580, 7594,    0, 6301,
      534,    0, 7621, 7635, 7663,    0, 6304,  532, 6303,    0,
      520,  503, 6611, 6444, 6445,    0, 6612, 7691,  486, 2003,
     2971, 7719,    0,    0, 6613, 7747,  471, 2351, 7775,    0,
     2837, 7803,    0, 6666,  464,  459,  416,    0, 6693, 6667,
     7831,    0, 3335, 5566, 7858, 6442,  409,  378,    0, 7875,
        0,  366, 6734,  360,  334,  285,    0, 6740,  268, 6735,
        0,  265, 6761,  872,  245, 6927,    0, 6680, 6932,  217,
     6886,  200, 7036,    0,  145,  121, 7403, 7039,  969, 7486,
     8972, 7903, 7916, 7928, 7941, 7954, 7967, 7981, 7994, 8007,

     8020, 8034, 8047, 8059, 8073, 8087, 8101, 8115, 8128, 8142,
      100, 8156,   85, 8170, 8184, 8197, 8211, 8221, 8235, 8245,
     8259, 8273, 8287, 8301, 8315, 8329, 8343, 8357, 8371,   74,
     8385, 8399, 8413,   71, 8427, 8437, 8451, 8465, 8479, 8493,
     8507, 8521, 8535, 8545, 8559, 8573, 8587, 8601,   66, 8611,
     8625, 8639, 8653, 8667, 8681,   26, 8691, 8705, 8719, 8733,
     8747, 8761, 8775, 8789, 8803, 8817, 8831, 8845, 8859, 8873,
     8887, 8901, 8915, 8929, 8943, 8957
    } ;

static yyconst flex_int16_t yy_def[877] =
    {   0,
      791,    1,  792,  792,  792,  792,  791,  791,  791,  791,
      791,  791,  793,  791,  794,  791,  791,  791,  791,  793,
      791,  795,  791,  791,  796,   14,  797,  791,  794,  791,
      791,  791,  791,  798,  799,  795,  791,  796,  800,  800,
       40,   38,  793,   29,  801,  791,   38,   38,   28,   29,
       29,  791,  791,  791,  802,  791,   47,  799,   36,   29,
       38,   40,  803,  791,  804,  801,  805,  806,  805,  801,
       46,   38,   47,  791,  791,  791,  802,  807,  808,  807,
      802,   56,   47,  803,  791,  809,  791,  791,   40,  810,
      791,  804,  805,   69,  805,  811,  791,  812,  812,   46,

      791,  791,  791,  807,  807,  813,  791,  814,  814,   56,
      791,  815,  816,  809,   40,   40,  817,  791,   40,   40,
       91,   92,   92,  805,   97,  791,  126,  126,  818,   97,
      791,   69,  791,  812,  819,  791,  791,  791,  820,  107,
      791,  807,  791,  814,  821,  822,  791,  119,  816,  114,
       92,   40,  817,  823,  824,  823,  817,  118,   40,  119,
       97,  126,  131,   69,  791,  825,  791,  811,  818,  131,
       69,  791,  791,  133,  819,  819,  819,  176,  791,  819,
      826,  791,  791,  827,  791,  813,  820,  141,  142,  791,
      142,  807,  791,  143,  821,  821,  821,  791,  821,  822,

      828,  829,  828,  822,  791,  119,  823,  156,  823,  830,
      791,  831,  831,  118,  163,  164,  791,  164,  164,  126,
      791,  165,  832,   69,  791,  172,   97,   97,  173,  133,
      133,  819,  179,  791,  234,  234,  179,  180,  176,  791,
      791,  826,  833,  791,  190,  807,  791,  791,  248,  248,
      247,  247,  193,  143,  143,  198,  199,  197,  791,  791,
      828,  828,  834,  791,  835,  835,  205,  211,  836,  211,
      791,  823,  791,  831,  837,  164,  791,  217,  126,  126,
      126,  126,  791,  283,  284,  838,  839,   97,  791,  791,
      133,   97,   97,  179,  234,  180,  176,  791,  180,  176,

      791,  791,  791,  791,  840,  841,  842,  247,  791,  791,
      791,  247,  791,  791,  843,  791,  247,  247,  791,  319,
      791,  320,  320,  791,  791,  791,  844,  791,  791,  845,
      791,  846,  847,  791,  848,  791,  849,  850,  791,  339,
      791,  791,  791,  851,  851,  851,  851,  791,  851,  791,
      791,  791,  791,  350,  350,  350,  852,  852,  852,  791,
      791,  361,  791,  362,  362,  791,  791,  791,  362,  791,
      791,  791,  372,  791,  374,  375,  853,  853,  853,  247,
      791,  381,  791,  382,  382,  791,  791,  791,  791,  791,
      854,  791,  791,  393,  393,  392,  392,  791,  398,  399,

      855,  791,  856,  857,  791,  405,  791,  406,  406,  791,
      791,  858,  858,  858,  791,  858,  859,  860,  791,  791,
      791,  421,  791,  423,  424,  791,  426,  791,  861,  791,
      791,  791,  862,  862,  791,  791,  863,  791,  791,  791,
      440,  440,  440,  791,  444,  445,  791,  791,  791,  791,
      447,  447,  864,  791,  791,  865,  791,  791,  791,  459,
      459,  459,  791,  463,  464,  791,  791,  791,  791,  466,
      791,  791,  866,  791,  466,  466,  867,  791,  791,  791,
      480,  480,  791,  483,  484,  791,  791,  868,  791,  791,
      869,  870,  791,  791,  791,  791,  493,  493,  791,  791,

      500,  791,  791,  791,  791,  871,  791,  791,  508,  508,
      507,  871,  871,  791,  791,  791,  791,  791,  791,  516,
      516,  516,  791,  791,  791,  872,  791,  791,  791,  791,
      791,  791,  529,  529,  529,  466,  472,  866,  791,  866,
      866,  791,  791,  791,  873,  874,  791,  791,  791,  791,
      547,  547,  547,  791,  554,  791,  555,  555,  791,  791,
      791,  875,  875,  875,  791,  876,  791,  791,  791,  569,
      791,  571,  572,  507,  791,  871,  871,  791,  576,  871,
      791,  791,  791,  791,  525,  872,  791,  872,  872,  791,
      791,  529,  866,  791,  539,  542,  542,  542,  542,  543,

      544,  544,  874,  874,  874,  547,  791,  556,  791,  609,
      609,  559,  560,  560,  563,  875,  791,  791,  569,  567,
      568,  572,  569,  569,  576,  577,  791,  577,  871,  575,
      791,  578,  871,  791,  581,  507,  507,  582,  583,  583,
      791,  587,  872,  791,  791,  645,  645,  644,  644,  590,
      591,  591,  542,  594,  539,  544,  542,  542,  542,  874,
      791,  791,  609,  607,  556,  560,  609,  609,  609,  617,
      617,  875,  563,  791,  618,  569,  577,  791,  627,  575,
      575,  575,  575,  631,  578,  578,  507,  634,  581,  583,
      507,  507,  644,  641,  587,  591,  644,  645,  525,  872,

      791,  644,  644,  542,  661,  605,  874,  791,  662,  609,
      617,  672,  563,  791,  791,  674,  575,  678,  627,  578,
      575,  575,  575,  507,  644,  699,  700,  791,  700,  872,
      645,  791,  701,  706,  707,  791,  707,  874,  791,  708,
      563,  791,  714,  617,  617,  715,  674,  674,  575,  700,
      791,  728,  645,  645,  645,  645,  732,  701,  701,  791,
      736,  661,  661,  661,  739,  708,  708,  617,  742,  714,
      674,  617,  617,  755,  751,  728,  701,  645,  645,  755,
      661,  760,  736,  708,  661,  661,  661,  617,  755,  661,
        0,  791,  791,  791,  791,  791,  791,  791,  791,  791,

      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791
    } ;

static yyconst flex_int16_t yy_nxt[9001] =
    {   0,
        8,    8,    9,    8,   10,   11,   12,    8,    8,   13,
        8,   13,    8,   14,    8,    8,    8,   15,    8,   15,
       15,   15,   15,   15,   15,   15,   15,   15,    9,    9,
       16,   16,   18,   20,   31,   19,   20,   32,  327,   33,
       20,   45,   67,   55,   78,   21,   23,   25,   21,   25,
       24,   21,   21,   57,   25,  145,   25,  791,   26,   23,
       33,   84,  394,   24,   42,   27,   34,   25,   25,   28,
       35,   23,   43,   85,   43,   24,   26,   33,  269,   25,
       23,   25,   37,  327,   24,   25,  269,   25,   38,  115,
       38,  115,   59,   39,   40,   41,   46,  139,   46,   46,

       46,   46,   46,   46,   46,   46,   46,   47,   33,   45,
       67,   24,  129,   27,   34,   48,   25,   49,   35,   50,
       99,   67,  786,   51,   29,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   23,   55,   78,   83,   24,  148,
       27,  791,   25,  791,   28,   56,  785,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   57,   61,  109,   78,
       84,  358,   34,  359,   48,   43,   58,   43,   59,   26,
      111,   47,   85,   36,   62,   24,  112,  111,   89,   48,
      113,   48,   63,  111,   63,   89,   64,   89,   40,   40,
       62,   89,  378,   89,  379,   85,  791,   67,   63,  206,

       63,  790,   64,  791,  791,  791,   66,   66,   66,   66,
       66,   66,   66,   68,   69,   66,   70,   71,  780,   71,
       66,   66,   66,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   77,   77,   77,   77,   77,   77,
       77,   79,   80,   77,   81,   82,  789,   82,   77,   77,
       77,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   83,   87,   99,  135,  772,   88,   34,  788,
       48,   89,   58,   89,   59,   99,  135,  791,   78,   36,
       87,  109,  145,  791,   88,  109,  145,  356,   89,  132,
       89,  219,   64,   87,  117,  154,  224,   88,  766,   90,

       93,   89,  791,   91,   94,  791,   67,  563,   95,  564,
       96,   67,   97,  127,   97,   94,   93,   93,  604,   95,
      605,   96,   67,   97,  111,   97,   45,   67,  166,  167,
      112,  168,   89,  452,  113,  787,  100,  177,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  105,   99,  135,
      109,  145,  119,  106,   78,  107,   88,  107,  105,  476,
      120,  786,  120,  323,  106,   78,  107,  785,  107,   55,
       78,  184,  185,  287,  186,  146,  201,  117,  154,  110,
      509,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      118,  758,  118,  118,  118,  118,  118,  118,  118,  118,

      118,  119,   87,  213,  154,   88,   88,   90,  498,  120,
      780,  121,  209,  122,  150,   93,   93,  123,   92,  123,
      123,  123,  123,  123,  123,  123,  123,  123,   87,  747,
      166,  167,   88,  168,   90,  492,   89,  562,   91,  124,
      791,  135,  522,  791,   67,  125,  365,  125,  791,  145,
      126,  127,  128,   93,  130,   93,   93,   93,   93,   93,
      773,   67,  131,   93,  131,  772,  132,   93,   93,   93,
      133,   93,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  105,   96,  178,  603,  180,  535,  791,   78,  107,
      385,  107,  104,  140,  104,  104,  104,  104,  104,  377,

       78,  141,  104,  141,  722,  142,  104,  104,  104,  143,
      104,  143,  143,  143,  143,  143,  143,  143,  143,  143,
      147,  721,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  148,   23,  749,  105,  711,   24,  112,  104,  120,
       25,  149,   25,  150,  184,  185,  189,  186,  114,  153,
      153,  153,  153,  153,  153,  153,  155,  156,  153,  157,
      158,  702,  158,  153,  153,  153,  158,  158,  158,  158,
      158,  158,  158,  158,  158,  158,  158,   93,  162,   93,
       93,   93,   93,   93,  725,   67,  163,   93,  163,  691,
      164,   93,  127,  127,  165,   93,  165,  165,  165,  165,

      165,  165,  165,  165,  165,   93,  170,   93,   93,   93,
       93,   93,  724,   67,   93,   93,   93,  685,  171,   93,
       93,   93,  172,   93,  172,  172,  172,  172,  172,  172,
      172,  172,  172,   93,   94,   93,   93,   93,   95,   93,
       27,   67,   97,   93,  173,  723,  174,   93,   93,   93,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  176,  146,  201,  722,  177,  681,   96,  178,  179,
      180,  179,  104,  188,  104,  104,  104,  104,  104,  721,
       78,  104,  104,  104,  711,  189,  104,  104,  104,  190,
      104,  190,  190,  190,  190,  190,  190,  190,  190,  190,

      191,   33,  266,  201,  192,  668,  791,   78,  107,   25,
      107,   25,  142,  104,  191,  104,  104,  104,  192,  104,
       27,   78,  107,  104,  193,  710,  194,  104,  104,  104,
      194,  194,  194,  194,  194,  194,  194,  194,  194,  194,
      194,  196,  791,  154,  213,  275,  658,  106,  197,  198,
      199,  198,  200,  200,  200,  200,  200,  200,  200,  202,
      203,  200,  204,  205,  657,  205,  200,  200,  200,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      206,  224,  213,  275,  307,   93,  112,  791,  120,  704,
      149,  646,  150,  171,  223,  287,  651,  114,  208,  791,

      154,  268,  209,  268,  210,  154,  211,  703,  211,  208,
      276,  280,  702,  209,   93,  210,  154,  211,  377,  211,
      117,  154,  216,  791,  135,   93,   93,  175,  175,  639,
      214,  235,  214,  214,  214,  214,  214,  214,  214,  214,
      214,  215,  227,  243,  307,  553,   95,  791,   78,  409,
      228,  692,  228,  216,  619,  249,  691,  217,  344,  217,
      217,  217,  217,  217,  217,  217,  217,  217,  218,  104,
      104,  676,  219,  774,  791,  344,  220,  377,  220,  681,
      164,   93,  218,   93,   93,   93,  219,   93,   90,   67,
      220,   93,  221,  357,  222,   93,   93,   93,  222,  222,

      222,  222,  222,  222,  222,  222,  222,  222,  222,   93,
      224,   93,   93,   93,   93,   93,   34,   67,   97,   93,
      225,  624,  226,   93,   93,   93,  226,  226,  226,  226,
      226,  226,  226,  226,  226,  226,  226,   93,  227,   93,
       93,   93,   95,   93,   27,   67,  228,   93,  229,  504,
      230,   93,   93,   93,  231,  174,  231,  231,  231,  231,
      231,  231,  231,  231,  231,  176,  791,  201,  676,  177,
      789,  791,  135,  179,  377,  179,  232,  266,  333,  613,
      791,  135,  233,  669,  233,  266,  333,  234,  235,  236,
      175,  237,  175,  175,  175,  175,  175,  668,  135,  238,

      175,  238,  606,  239,  175,  175,  175,  240,  175,  240,
      240,  240,  240,  240,  240,  240,  240,  240,  791,  135,
      335,  336,  546,  337,  213,  275,  223,  287,  241,  601,
      241,  241,  241,  241,  241,  241,  241,  241,  241,  104,
      105,  104,  104,  104,  104,  104,   34,   78,  107,  104,
      244,  659,  245,  104,  104,  104,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  246,  175,  175,
      658,  791,   78,  247,  657,  247,  243,  307,  248,  249,
      250,  104,  251,  104,  104,  104,  192,  104,   27,   78,
      252,  104,  253,  592,  254,  104,  104,  104,  255,  194,

      255,  255,  255,  255,  255,  255,  255,  255,  255,  196,
      266,  333,  504,  288,  251,  791,  145,  198,  192,  198,
      196,  228,  252,  228,  252,  492,  106,  197,  198,  199,
      198,  195,  256,  195,  195,  195,  195,  195,  536,  145,
      257,  195,  257,  511,  258,  195,  195,  195,  259,  195,
      259,  259,  259,  259,  259,  259,  259,  259,  259,  791,
      145,  401,  402,  357,  403,  195,  195,  411,  354,  260,
      552,  260,  260,  260,  260,  260,  260,  260,  260,  260,
      262,  276,   93,   93,  388,   93,  263,  201,  264,  534,
      264,  262,  280,   93,  355,  417,  492,  263,  201,  264,

      460,  264,  146,  201,  477,  546,   93,   93,   93,   93,
      335,  336,  267,  337,  267,  267,  267,  267,  267,  267,
      267,  267,  267,  200,  200,  200,  200,  200,  200,  200,
      202,  203,  200,  204,  205,  368,  205,  200,  200,  200,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  207,  270,  207,  207,  207,  207,  207,  521,  154,
      271,  207,  271,  441,  272,  207,  207,  207,  273,  207,
      273,  273,  273,  273,  273,  273,  273,  273,  273,   93,
      276,   93,   93,   93,   93,   93,  112,   67,  220,   93,
      277,  427,  278,   93,   93,   93,  278,  278,  278,  278,

      278,  278,  278,  278,  278,  278,  278,   93,  293,  417,
      492,   93,   95,  357,  357,  279,  228,  279,  228,   93,
       93,  281,   93,   93,   93,  219,   93,   90,   67,  282,
       93,  283,  343,  284,   93,   93,   93,  285,  222,  285,
      285,  285,  285,  285,  285,  285,  285,  285,   93,  288,
       93,   93,   93,   93,   93,   34,   67,  228,   93,  289,
      333,  290,   93,   93,   93,  291,  226,  291,  291,  291,
      291,  291,  291,  291,  291,  291,  175,  295,  175,  175,
      175,  175,  175,  325,  135,  296,  175,  296,  475,  297,
      175,  235,  235,  298,  175,  298,  298,  298,  298,  298,

      298,  298,  298,  298,  299,  369,  322,  477,  546,  175,
      323,  308,  275,  426,  195,  426,  300,  300,  195,  252,
      301,  252,  301,  301,  301,  301,  301,  301,  301,  301,
      301,  175,  176,  175,  175,  175,  177,  175,   27,  135,
      179,  175,  302,  307,  303,  175,  175,  175,  303,  303,
      303,  303,  303,  303,  303,  303,  303,  303,  303,  175,
      175,  175,  175,  175,  175,  175,  166,  178,  175,  180,
      304,  303,  304,  175,  175,  175,  304,  304,  304,  304,
      304,  304,  304,  304,  304,  304,  304,  104,  308,  104,
      104,  104,  104,  104,   34,   78,  252,  104,  309,  287,

      310,  104,  104,  104,  311,  245,  311,  311,  311,  311,
      311,  311,  311,  311,  311,  104,  312,  104,  104,  104,
      104,  104,  275,   78,  141,  104,  141,  317,  142,  104,
      104,  104,  143,  104,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  104,  313,  104,  104,  104,  104,  104,
      305,   78,  314,  104,  314,  294,  315,  104,  249,  249,
      316,  104,  316,  316,  316,  316,  316,  316,  316,  316,
      316,  319,  318,  364,  377,  377,  192,  365,  354,  492,
      252,  562,  252,  320,  673,  175,  163,  321,  163,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  322,  292,

      401,  402,  323,  403,  791,  145,  222,  195,  377,  377,
      258,  195,  322,  195,  195,  195,  323,  195,   27,  145,
      198,  195,  324,  334,  325,  195,  195,  195,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  195,
      195,  195,  195,  195,  195,  195,  184,  197,  195,  199,
      326,  254,  326,  195,  195,  195,  326,  326,  326,  326,
      326,  326,  326,  326,  326,  326,  326,  262,  145,  596,
      318,  596,  317,  791,  201,  264,  104,  264,  261,  328,
      261,  261,  261,  261,  261,  305,  201,  329,  261,  329,
      239,  330,  261,  261,  261,  331,  261,  331,  331,  331,

      331,  331,  331,  331,  331,  331,  207,  339,  207,  207,
      207,  207,  207,  175,  154,  207,  207,  207,  294,  340,
      207,  207,  207,  341,  207,  341,  341,  341,  341,  341,
      341,  341,  341,  341,  208,   87,  230,  293,  209,   88,
      791,  154,  211,   89,  211,   89,  272,  207,  208,  207,
      207,  207,  209,  207,   90,  154,  211,  207,  342,  292,
      343,  207,  207,  207,  343,  343,  343,  343,  343,  343,
      343,  343,  343,  343,  343,  345,   93,  492,  670,  346,
      670,  210,  347,  348,  349,  348,   93,  350,   93,   93,
       93,   93,   93,  112,   67,  282,   93,  351,  791,  352,

       93,   93,   93,  353,  278,  353,  353,  353,  353,  353,
      353,  353,  353,  353,  281,  355,  287,  680,  219,  680,
      104,  136,  282,  163,  282,  163,  136,  161,   93,   93,
       93,  356,   93,   93,   93,  219,   93,   90,   67,  282,
       93,  283,  160,  284,   93,   93,   93,  285,  222,  285,
      285,  285,  285,  285,  285,  285,  285,  285,  218,  175,
      159,  384,  380,  152,  183,  385,  220,  440,  221,  440,
      252,  175,  252,  104,  222,  182,  222,  222,  222,  222,
      222,  222,  222,  222,  222,   93,  360,   93,   93,   93,
       93,   93,   34,   67,  228,   93,  289,  181,  290,   93,

       93,   93,  291,  226,  291,  291,  291,  291,  291,  291,
      291,  291,  291,   93,   94,   93,   93,   93,   95,   93,
       34,   67,   97,   93,  225,   93,  290,   93,   93,   93,
      226,  226,  226,  226,  226,  226,  226,  226,  226,  226,
      226,  361,  369,  408,  161,  122,  160,  409,  111,  159,
      179,  116,  179,  362,  175,  261,   89,  363,   89,  363,
      363,  363,  363,  363,  363,  363,  363,  363,  364,  451,
      152,  138,  365,  175,  137,  136,  366,  238,  366,  238,
      297,  175,  364,  175,  175,  175,  365,  175,   90,  135,
      366,  175,  367,  791,  368,  175,  175,  175,  368,  368,

      368,  368,  368,  368,  368,  368,  368,  368,  368,  299,
      104,  307,  753,  116,  753,  103,  413,  102,  459,  101,
      459,  300,  104,  333,  415,  301,  415,  301,  301,  301,
      301,  301,  301,  301,  301,  301,  175,  369,  175,  175,
      175,  175,  175,   34,  135,  179,  175,  370,   73,  371,
      175,  175,  175,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  175,  372,  175,  175,  175,  177,
      175,   27,  135,  373,  175,  374,   72,  375,  175,  175,
      175,  376,  303,  376,  376,  376,  376,  376,  376,  376,
      376,  376,  175,  176,  175,  175,  175,  177,  175,   27,

      135,  179,  175,  302,   76,  303,  175,  175,  175,  303,
      303,  303,  303,  303,  303,  303,  303,  303,  303,  303,
      175,  175,  175,  175,  175,  175,  175,  166,  178,  175,
      180,  304,   75,  304,  175,  175,  175,  304,  304,  304,
      304,  304,  304,  304,  304,  304,  304,  304,  104,  380,
      104,  104,  104,  104,  104,   34,   78,  252,  104,  309,
       74,  310,  104,  104,  104,  311,  245,  311,  311,  311,
      311,  311,  311,  311,  311,  311,  104,  191,  104,  104,
      104,  192,  104,   34,   78,  107,  104,  244,   50,  310,
      104,  104,  104,  245,  245,  245,  245,  245,  245,  245,

      245,  245,  245,  245,  104,  191,  104,  104,  104,  192,
      104,   27,   78,  107,  104,  193,   73,  194,  104,  104,
      104,  194,  194,  194,  194,  194,  194,  194,  194,  194,
      194,  194,  104,  313,  104,  104,  104,  104,  104,   72,
       78,  314,  104,  314,   42,  315,  104,  104,  104,  316,
      104,  316,  316,  316,  316,  316,  316,  316,  316,  316,
      104,  381,  104,  104,  104,  104,  104,   40,   78,  104,
      104,  104,   40,  382,  104,  104,  104,  383,  104,  383,
      383,  383,  383,  383,  383,  383,  383,  383,  384,  396,
       54,   53,  385,  323,   52,   78,  386,  397,  386,  397,

      315,  104,  384,  104,  104,  104,  385,  104,   90,   78,
      386,  104,  387,   30,  388,  104,  104,  104,  388,  388,
      388,  388,  388,  388,  388,  388,  388,  388,  388,  195,
      319,  195,  195,  195,  195,  195,  791,  145,  195,  195,
      195,   17,  320,  195,  195,  195,  321,  195,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  196,  261,  546,
      762,   17,  762,  791,  418,  198,  480,  198,  480,  791,
      261,  154,  211,  195,  211,  195,  195,  195,  195,  195,
      195,  195,  195,  195,  195,  196,  195,  195,  195,  195,
      195,   34,  145,  198,  195,  389,  791,  390,  195,  195,

      195,  390,  390,  390,  390,  390,  390,  390,  390,  390,
      390,  390,  195,  497,  391,  791,  791,  207,  791,  791,
      392,  271,  392,  271,  195,  393,  394,  395,  195,  396,
      195,  195,  195,  323,  195,   27,  145,  397,  195,  398,
      791,  399,  195,  195,  195,  400,  325,  400,  400,  400,
      400,  400,  400,  400,  400,  400,  195,  322,  195,  195,
      195,  323,  195,   27,  145,  198,  195,  324,  791,  325,
      195,  195,  195,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  195,  195,  195,  195,  195,  195,
      195,  184,  197,  195,  199,  326,  791,  326,  195,  195,

      195,  326,  326,  326,  326,  326,  326,  326,  326,  326,
      326,  326,  261,  328,  261,  261,  261,  261,  261,  791,
      201,  329,  261,  329,  791,  330,  261,  261,  261,  331,
      261,  331,  331,  331,  331,  331,  331,  331,  331,  331,
      261,  405,  261,  261,  261,  261,  261,  791,  201,  261,
      261,  261,  791,  406,  261,  261,  261,  407,  261,  407,
      407,  407,  407,  407,  407,  407,  407,  407,  408,  442,
      791,  791,  409,  365,  791,  201,  264,  443,  264,  443,
      330,  261,  408,  261,  261,  261,  409,  261,   90,  201,
      264,  261,  410,  791,  411,  261,  261,  261,  411,  411,

      411,  411,  411,  411,  411,  411,  411,  411,  411,  413,
      791,  791,  791,  791,  791,  263,  414,  415,  416,  415,
      207,  334,  207,  207,  207,  207,  207,  791,  154,  271,
      207,  271,  791,  272,  207,  207,  207,  273,  207,  273,
      273,  273,  273,  273,  273,  273,  273,  273,  207,  339,
      207,  207,  207,  207,  207,  791,  154,  207,  207,  207,
      791,  340,  207,  207,  207,  341,  207,  341,  341,  341,
      341,  341,  341,  341,  341,  341,  418,  791,  791,  791,
      437,  451,  791,  791,  211,  791,  211,  135,  366,  238,
      366,  238,  207,  791,  207,  207,  207,  207,  207,  207,

      207,  207,  207,  207,  418,  207,  207,  207,  207,  207,
      112,  154,  211,  207,  419,  791,  420,  207,  207,  207,
      420,  420,  420,  420,  420,  420,  420,  420,  420,  420,
      420,  207,  421,  207,  207,  207,  209,  207,   90,  154,
      422,  207,  423,  791,  424,  207,  207,  207,  425,  343,
      425,  425,  425,  425,  425,  425,  425,  425,  425,  207,
      208,  207,  207,  207,  209,  207,   90,  154,  211,  207,
      342,  791,  343,  207,  207,  207,  343,  343,  343,  343,
      343,  343,  343,  343,  343,  343,  343,  345,  791,  791,
      791,  346,  791,  453,  275,  348,  791,  348,  345,  791,

      307,  454,  346,  454,  210,  347,  348,  349,  348,  344,
      427,  344,  344,  344,  344,  344,  791,  275,  428,  344,
      428,  791,  429,  344,  344,  344,  430,  344,  430,  430,
      430,  430,  430,  430,  430,  430,  430,  275,  741,  791,
      791,  791,  562,  791,  791,  492,  431,  562,  431,  431,
      431,  431,  431,  431,  431,  431,  431,   93,  350,   93,
       93,   93,   93,   93,  791,   67,  282,   93,  282,  791,
      164,   93,   93,   93,  165,   93,  165,  165,  165,  165,
      165,  165,  165,  165,  165,   93,  432,   93,   93,   93,
       93,   93,  112,   67,  282,   93,  351,  791,  352,   93,

       93,   93,  353,  278,  353,  353,  353,  353,  353,  353,
      353,  353,  353,   93,  218,   93,   93,   93,  219,   93,
      112,   67,  220,   93,  277,  791,  352,   93,   93,   93,
      278,  278,  278,  278,  278,  278,  278,  278,  278,  278,
      278,   93,  218,   93,   93,   93,  219,   93,   90,   67,
      220,   93,  221,  791,  222,   93,   93,   93,  222,  222,
      222,  222,  222,  222,  222,  222,  222,  222,  222,  433,
      791,  791,  754,  434,  456,  470,  358,  435,  359,  435,
      287,   78,  386,  257,  386,  257,  377,  377,  791,  436,
      791,  436,  436,  436,  436,  436,  436,  436,  436,  436,

       93,  360,   93,   93,   93,   93,   93,  791,   67,  228,
       93,  228,  791,  132,   93,   93,   93,  133,   93,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  175,  361,
      175,  175,  175,  175,  175,  791,  135,  175,  175,  175,
      791,  362,  175,  175,  175,  363,  175,  363,  363,  363,
      363,  363,  363,  363,  363,  363,  437,  461,  791,  791,
      475,  385,  791,  497,  366,  462,  366,  462,  257,  791,
      257,  271,  175,  271,  175,  175,  175,  175,  175,  175,
      175,  175,  175,  175,  437,  175,  175,  175,  175,  175,
      112,  135,  366,  175,  438,  791,  439,  175,  175,  175,

      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  175,  441,  175,  175,  175,  175,  175,  791,  135,
      296,  175,  296,  791,  297,  175,  175,  175,  298,  175,
      298,  298,  298,  298,  298,  298,  298,  298,  298,  175,
      442,  175,  175,  175,  365,  175,   90,  135,  443,  175,
      444,  791,  445,  175,  175,  175,  446,  368,  446,  446,
      446,  446,  446,  446,  446,  446,  446,  175,  364,  175,
      175,  175,  365,  175,   90,  135,  366,  175,  367,  791,
      368,  175,  175,  175,  368,  368,  368,  368,  368,  368,
      368,  368,  368,  368,  368,  175,  447,  175,  175,  175,

      175,  175,   34,  135,  373,  175,  448,  791,  449,  175,
      175,  175,  450,  371,  450,  450,  450,  450,  450,  450,
      450,  450,  450,  175,  369,  175,  175,  175,  175,  175,
       34,  135,  179,  175,  370,  791,  371,  175,  175,  175,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  175,  372,  175,  175,  175,  177,  175,  791,  135,
      373,  175,  373,  791,  239,  175,  175,  175,  240,  175,
      240,  240,  240,  240,  240,  240,  240,  240,  240,  175,
      452,  175,  175,  175,  177,  175,   27,  135,  373,  175,
      374,  791,  375,  175,  175,  175,  376,  303,  376,  376,

      376,  376,  376,  376,  376,  376,  376,  176,  481,  791,
      791,  520,  409,  791,  521,  179,  482,  302,  482,  296,
      791,  296,  296,  303,  296,  303,  303,  303,  303,  303,
      303,  303,  303,  303,  453,  791,  778,  791,  533,  534,
      791,  378,  454,  379,  454,  307,  314,  314,  314,  314,
      377,  377,  791,  791,  455,  791,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  104,  381,  104,  104,  104,
      104,  104,  791,   78,  104,  104,  104,  791,  382,  104,
      104,  104,  383,  104,  383,  383,  383,  383,  383,  383,
      383,  383,  383,  456,  551,  791,  557,  552,  791,  791,

      558,  386,  329,  386,  329,  329,  791,  329,  412,  104,
      791,  104,  104,  104,  104,  104,  104,  104,  104,  104,
      104,  456,  104,  104,  104,  104,  104,  112,   78,  386,
      104,  457,  791,  458,  104,  104,  104,  458,  458,  458,
      458,  458,  458,  458,  458,  458,  458,  458,  104,  460,
      104,  104,  104,  104,  104,  791,   78,  314,  104,  314,
      791,  315,  104,  104,  104,  316,  104,  316,  316,  316,
      316,  316,  316,  316,  316,  316,  104,  461,  104,  104,
      104,  385,  104,   90,   78,  462,  104,  463,  791,  464,
      104,  104,  104,  465,  388,  465,  465,  465,  465,  465,

      465,  465,  465,  465,  104,  384,  104,  104,  104,  385,
      104,   90,   78,  386,  104,  387,  791,  388,  104,  104,
      104,  388,  388,  388,  388,  388,  388,  388,  388,  388,
      388,  388,  195,  466,  195,  195,  195,  195,  195,   34,
      145,  397,  195,  467,  791,  468,  195,  195,  195,  469,
      390,  469,  469,  469,  469,  469,  469,  469,  469,  469,
      195,  196,  195,  195,  195,  195,  195,   34,  145,  198,
      195,  389,  791,  390,  195,  195,  195,  390,  390,  390,
      390,  390,  390,  390,  390,  390,  390,  390,  195,  470,
      195,  195,  195,  195,  195,  791,  145,  257,  195,  257,

      791,  258,  195,  195,  195,  259,  195,  259,  259,  259,
      259,  259,  259,  259,  259,  259,  195,  471,  195,  195,
      195,  195,  195,  791,  145,  472,  195,  472,  791,  473,
      195,  394,  394,  474,  195,  474,  474,  474,  474,  474,
      474,  474,  474,  474,  195,  476,  195,  195,  195,  323,
      195,   27,  145,  397,  195,  398,  791,  399,  195,  195,
      195,  400,  325,  400,  400,  400,  400,  400,  400,  400,
      400,  400,  322,  412,  791,  791,  791,  791,  791,  566,
      198,  609,  324,  609,  791,  412,  275,  348,  325,  348,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  261,

      405,  261,  261,  261,  261,  261,  791,  201,  261,  261,
      261,  791,  406,  261,  261,  261,  407,  261,  407,  407,
      407,  407,  407,  407,  407,  407,  407,  262,  623,  791,
      791,  791,  344,  791,  593,  264,  428,  264,  428,  791,
      791,  145,  542,  261,  542,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  262,  261,  261,  261,  261,
      261,  112,  201,  264,  261,  478,  791,  479,  261,  261,
      261,  479,  479,  479,  479,  479,  479,  479,  479,  479,
      479,  479,  261,  481,  261,  261,  261,  409,  261,   90,
      201,  482,  261,  483,  791,  484,  261,  261,  261,  485,

      411,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      261,  408,  261,  261,  261,  409,  261,   90,  201,  264,
      261,  410,  791,  411,  261,  261,  261,  411,  411,  411,
      411,  411,  411,  411,  411,  411,  411,  411,  413,  791,
      791,  791,  791,  791,  263,  414,  415,  416,  415,  412,
      486,  412,  412,  412,  412,  412,  791,  333,  487,  412,
      487,  791,  488,  412,  412,  412,  489,  412,  489,  489,
      489,  489,  489,  489,  489,  489,  489,  333,  791,  791,
      791,  791,  791,  791,  791,  791,  490,  791,  490,  490,
      490,  490,  490,  490,  490,  490,  490,  207,  493,  207,

      207,  207,  207,  207,  112,  154,  422,  207,  494,  791,
      495,  207,  207,  207,  496,  420,  496,  496,  496,  496,
      496,  496,  496,  496,  496,  207,  418,  207,  207,  207,
      207,  207,  112,  154,  211,  207,  419,  791,  420,  207,
      207,  207,  420,  420,  420,  420,  420,  420,  420,  420,
      420,  420,  420,  207,  421,  207,  207,  207,  209,  207,
      791,  154,  422,  207,  422,  791,  272,  207,  207,  207,
      273,  207,  273,  273,  273,  273,  273,  273,  273,  273,
      273,  207,  498,  207,  207,  207,  209,  207,   90,  154,
      422,  207,  423,  791,  424,  207,  207,  207,  425,  343,

      425,  425,  425,  425,  425,  425,  425,  425,  425,  208,
      598,  345,  677,  791,  541,  346,  357,  211,  599,  342,
      599,  791,  791,  621,  626,  343,  791,  343,  343,  343,
      343,  343,  343,  343,  343,  343,  344,  499,  344,  344,
      344,  344,  344,  791,  275,  428,  344,  428,  791,  429,
      344,  344,  344,  430,  344,  430,  430,  430,  430,  430,
      430,  430,  430,  430,  344,  500,  344,  344,  344,  344,
      344,  791,  275,  344,  344,  344,  791,  501,  344,  344,
      344,  502,  344,  502,  502,  502,  502,  502,  502,  502,
      502,  502,  345,  610,  791,  791,  346,  558,  791,  275,

      348,  611,  348,  611,  429,  344,  345,  344,  344,  344,
      346,  344,   90,  275,  348,  344,  503,  791,  504,  344,
      344,  344,  504,  504,  504,  504,  504,  504,  504,  504,
      504,  504,  504,  344,  344,  344,  344,  344,  344,  344,
      335,  347,  344,  349,  505,  791,  505,  344,  344,  344,
      505,  505,  505,  505,  505,  505,  505,  505,  505,  505,
      505,   93,  432,   93,   93,   93,   93,   93,  791,   67,
      282,   93,  282,  791,  164,   93,   93,   93,  165,   93,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  433,
      791,  540,  791,  434,  623,  541,  287,  435,  344,  435,

      506,  791,  428,  655,  428,  287,  507,  791,  507,  791,
      791,  508,  509,  510,  357,  511,  357,  357,  357,  357,
      357,  791,  287,  512,  357,  512,  791,  513,  357,  357,
      357,  514,  357,  514,  514,  514,  514,  514,  514,  514,
      514,  514,  357,  357,  357,  357,  357,  357,  357,  166,
      358,  357,  359,  515,  791,  515,  357,  357,  357,  515,
      515,  515,  515,  515,  515,  515,  515,  515,  515,  515,
      175,  516,  175,  175,  175,  175,  175,  112,  135,  443,
      175,  517,  791,  518,  175,  175,  175,  519,  439,  519,
      519,  519,  519,  519,  519,  519,  519,  519,  175,  437,

      175,  175,  175,  175,  175,  112,  135,  366,  175,  438,
      791,  439,  175,  175,  175,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  175,  520,  175,  175,
      175,  175,  175,  791,  135,  296,  175,  296,  791,  297,
      175,  175,  175,  298,  175,  298,  298,  298,  298,  298,
      298,  298,  298,  298,  175,  522,  175,  175,  175,  365,
      175,   90,  135,  443,  175,  444,  791,  445,  175,  175,
      175,  446,  368,  446,  446,  446,  446,  446,  446,  446,
      446,  446,  364,  791,  791,  791,  633,  636,  791,  791,
      366,  434,  367,  287,  435,  637,  435,  637,  368,  791,

      368,  368,  368,  368,  368,  368,  368,  368,  368,  175,
      447,  175,  175,  175,  175,  175,  791,  135,  373,  175,
      373,  791,  239,  175,  175,  175,  240,  175,  240,  240,
      240,  240,  240,  240,  240,  240,  240,  175,  523,  175,
      175,  175,  175,  175,   34,  135,  373,  175,  448,  791,
      449,  175,  175,  175,  450,  371,  450,  450,  450,  450,
      450,  450,  450,  450,  450,  175,  176,  175,  175,  175,
      177,  175,   34,  135,  179,  175,  370,  791,  449,  175,
      175,  175,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  175,  176,  175,  175,  175,  177,  175,

       27,  135,  179,  175,  302,  791,  303,  175,  175,  175,
      303,  303,  303,  303,  303,  303,  303,  303,  303,  303,
      303,  377,  524,  377,  377,  377,  377,  377,  791,  307,
      525,  377,  525,  791,  526,  377,  377,  377,  527,  377,
      527,  527,  527,  527,  527,  527,  527,  527,  527,  377,
      377,  377,  377,  377,  377,  377,  184,  378,  377,  379,
      528,  791,  528,  377,  377,  377,  528,  528,  528,  528,
      528,  528,  528,  528,  528,  528,  528,  104,  529,  104,
      104,  104,  104,  104,  112,   78,  462,  104,  530,  791,
      531,  104,  104,  104,  532,  458,  532,  532,  532,  532,

      532,  532,  532,  532,  532,  104,  456,  104,  104,  104,
      104,  104,  112,   78,  386,  104,  457,  791,  458,  104,
      104,  104,  458,  458,  458,  458,  458,  458,  458,  458,
      458,  458,  458,  104,  533,  104,  104,  104,  104,  104,
      791,   78,  314,  104,  314,  791,  315,  104,  104,  104,
      316,  104,  316,  316,  316,  316,  316,  316,  316,  316,
      316,  104,  535,  104,  104,  104,  385,  104,   90,   78,
      462,  104,  463,  791,  464,  104,  104,  104,  465,  388,
      465,  465,  465,  465,  465,  465,  465,  465,  465,  384,
      648,  791,  791,  653,  589,  791,  663,  386,  649,  387,

      649,  599,  791,  599,  611,  388,  611,  388,  388,  388,
      388,  388,  388,  388,  388,  388,  195,  466,  195,  195,
      195,  195,  195,  791,  145,  397,  195,  397,  791,  258,
      195,  195,  195,  259,  195,  259,  259,  259,  259,  259,
      259,  259,  259,  259,  195,  536,  195,  195,  195,  195,
      195,   34,  145,  397,  195,  467,  791,  468,  195,  195,
      195,  469,  390,  469,  469,  469,  469,  469,  469,  469,
      469,  469,  195,  322,  195,  195,  195,  323,  195,   34,
      145,  198,  195,  389,  791,  468,  195,  195,  195,  390,
      390,  390,  390,  390,  390,  390,  390,  390,  390,  390,

      195,  322,  195,  195,  195,  323,  195,   27,  145,  198,
      195,  324,  791,  325,  195,  195,  195,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  195,  471,
      195,  195,  195,  195,  195,  791,  145,  472,  195,  472,
      791,  473,  195,  195,  195,  474,  195,  474,  474,  474,
      474,  474,  474,  474,  474,  474,  195,  537,  195,  195,
      195,  195,  195,  791,  145,  195,  195,  195,  791,  538,
      195,  195,  195,  539,  195,  539,  539,  539,  539,  539,
      539,  539,  539,  539,  540,  659,  791,  791,  541,  541,
      791,  145,  542,  599,  542,  599,  473,  195,  540,  195,

      195,  195,  541,  195,   90,  145,  542,  195,  543,  791,
      544,  195,  195,  195,  544,  544,  544,  544,  544,  544,
      544,  544,  544,  544,  544,  261,  547,  261,  261,  261,
      261,  261,  112,  201,  482,  261,  548,  791,  549,  261,
      261,  261,  550,  479,  550,  550,  550,  550,  550,  550,
      550,  550,  550,  261,  262,  261,  261,  261,  261,  261,
      112,  201,  264,  261,  478,  791,  479,  261,  261,  261,
      479,  479,  479,  479,  479,  479,  479,  479,  479,  479,
      479,  261,  551,  261,  261,  261,  261,  261,  791,  201,
      329,  261,  329,  791,  330,  261,  261,  261,  331,  261,

      331,  331,  331,  331,  331,  331,  331,  331,  331,  261,
      553,  261,  261,  261,  409,  261,   90,  201,  482,  261,
      483,  791,  484,  261,  261,  261,  485,  411,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  408,  557,  791,
      677,  660,  558,  791,  357,  264,  791,  410,  546,  661,
      665,  661,  357,  411,  791,  411,  411,  411,  411,  411,
      411,  411,  411,  411,  412,  486,  412,  412,  412,  412,
      412,  791,  333,  487,  412,  487,  791,  488,  412,  412,
      412,  489,  412,  489,  489,  489,  489,  489,  489,  489,
      489,  489,  412,  554,  412,  412,  412,  412,  412,  791,

      333,  412,  412,  412,  791,  555,  412,  412,  412,  556,
      412,  556,  556,  556,  556,  556,  556,  556,  556,  556,
      557,  669,  791,  791,  558,  558,  791,  333,  415,  611,
      415,  611,  488,  412,  557,  412,  412,  412,  558,  412,
       90,  333,  415,  412,  559,  791,  560,  412,  412,  412,
      560,  560,  560,  560,  560,  560,  560,  560,  560,  560,
      560,  412,  412,  412,  412,  412,  412,  412,  401,  414,
      412,  416,  561,  791,  561,  412,  412,  412,  561,  561,
      561,  561,  561,  561,  561,  561,  561,  561,  561,  207,
      493,  207,  207,  207,  207,  207,  791,  154,  422,  207,

      422,  791,  272,  207,  207,  207,  273,  207,  273,  273,
      273,  273,  273,  273,  273,  273,  273,  207,  565,  207,
      207,  207,  207,  207,  112,  154,  422,  207,  494,  791,
      495,  207,  207,  207,  496,  420,  496,  496,  496,  496,
      496,  496,  496,  496,  496,  207,  208,  207,  207,  207,
      209,  207,  112,  154,  211,  207,  419,  791,  495,  207,
      207,  207,  420,  420,  420,  420,  420,  420,  420,  420,
      420,  420,  420,  207,  208,  207,  207,  207,  209,  207,
       90,  154,  211,  207,  342,  791,  343,  207,  207,  207,
      343,  343,  343,  343,  343,  343,  343,  343,  343,  343,

      343,  344,  499,  344,  344,  344,  344,  344,  791,  275,
      428,  344,  428,  791,  429,  344,  344,  344,  430,  344,
      430,  430,  430,  430,  430,  430,  430,  430,  430,  344,
      500,  344,  344,  344,  344,  344,  791,  275,  344,  344,
      344,  791,  501,  344,  344,  344,  502,  344,  502,  502,
      502,  502,  502,  502,  502,  502,  502,  566,  682,  791,
      433,  687,  629,  791,  434,  348,  683,  348,  683,  637,
      791,  637,  689,  344,  791,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  566,  344,  344,  344,  344,
      344,  112,  275,  348,  344,  567,  791,  568,  344,  344,

      344,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  344,  569,  344,  344,  344,  346,  344,   90,
      275,  570,  344,  571,  791,  572,  344,  344,  344,  573,
      504,  573,  573,  573,  573,  573,  573,  573,  573,  573,
      344,  345,  344,  344,  344,  346,  344,   90,  275,  348,
      344,  503,  791,  504,  344,  344,  344,  504,  504,  504,
      504,  504,  504,  504,  504,  504,  504,  504,  344,  344,
      344,  344,  344,  344,  344,  335,  347,  344,  349,  505,
      791,  505,  344,  344,  344,  505,  505,  505,  505,  505,
      505,  505,  505,  505,  505,  505,  357,  574,  357,  357,

      357,  357,  357,  791,  287,  512,  357,  512,  791,  513,
      357,  357,  357,  514,  357,  514,  514,  514,  514,  514,
      514,  514,  514,  514,  357,  575,  357,  357,  357,  357,
      357,  791,  287,  576,  357,  576,  791,  577,  357,  509,
      509,  578,  357,  578,  578,  578,  578,  578,  578,  578,
      578,  578,  579,  692,  588,  791,  791,  434,  589,  287,
      791,  637,  791,  637,  580,  791,  695,  754,  581,  791,
      581,  581,  581,  581,  581,  581,  581,  581,  581,  433,
      693,  377,  377,  434,  791,  791,  287,  435,  649,  435,
      649,  513,  357,  433,  357,  357,  357,  434,  357,   27,

      287,  435,  357,  582,  791,  583,  357,  357,  357,  583,
      583,  583,  583,  583,  583,  583,  583,  583,  583,  583,
      357,  357,  357,  357,  357,  357,  357,  166,  358,  357,
      359,  515,  791,  515,  357,  357,  357,  515,  515,  515,
      515,  515,  515,  515,  515,  515,  515,  515,  175,  516,
      175,  175,  175,  175,  175,  791,  135,  443,  175,  443,
      791,  297,  175,  175,  175,  298,  175,  298,  298,  298,
      298,  298,  298,  298,  298,  298,  175,  584,  175,  175,
      175,  175,  175,  112,  135,  443,  175,  517,  791,  518,
      175,  175,  175,  519,  439,  519,  519,  519,  519,  519,

      519,  519,  519,  519,  175,  364,  175,  175,  175,  365,
      175,  112,  135,  366,  175,  438,  791,  518,  175,  175,
      175,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  175,  364,  175,  175,  175,  365,  175,   90,
      135,  366,  175,  367,  791,  368,  175,  175,  175,  368,
      368,  368,  368,  368,  368,  368,  368,  368,  368,  368,
      175,  523,  175,  175,  175,  175,  175,  791,  135,  373,
      175,  373,  791,  239,  175,  175,  175,  240,  175,  240,
      240,  240,  240,  240,  240,  240,  240,  240,  377,  524,
      377,  377,  377,  377,  377,  791,  307,  525,  377,  525,

      791,  526,  377,  377,  377,  527,  377,  527,  527,  527,
      527,  527,  527,  527,  527,  527,  377,  585,  377,  377,
      377,  377,  377,  791,  307,  377,  377,  377,  791,  586,
      377,  377,  377,  587,  377,  587,  587,  587,  587,  587,
      587,  587,  587,  587,  588,  703,  791,  791,  589,  589,
      791,  307,  454,  649,  454,  649,  526,  377,  588,  377,
      377,  377,  589,  377,   27,  307,  454,  377,  590,  791,
      591,  377,  377,  377,  591,  591,  591,  591,  591,  591,
      591,  591,  591,  591,  591,  377,  377,  377,  377,  377,
      377,  377,  184,  378,  377,  379,  528,  791,  528,  377,

      377,  377,  528,  528,  528,  528,  528,  528,  528,  528,
      528,  528,  528,  104,  529,  104,  104,  104,  104,  104,
      791,   78,  462,  104,  462,  791,  315,  104,  104,  104,
      316,  104,  316,  316,  316,  316,  316,  316,  316,  316,
      316,  104,  592,  104,  104,  104,  104,  104,  112,   78,
      462,  104,  530,  791,  531,  104,  104,  104,  532,  458,
      532,  532,  532,  532,  532,  532,  532,  532,  532,  104,
      384,  104,  104,  104,  385,  104,  112,   78,  386,  104,
      457,  791,  531,  104,  104,  104,  458,  458,  458,  458,
      458,  458,  458,  458,  458,  458,  458,  104,  384,  104,

      104,  104,  385,  104,   90,   78,  386,  104,  387,  791,
      388,  104,  104,  104,  388,  388,  388,  388,  388,  388,
      388,  388,  388,  388,  388,  593,  704,  791,  791,  791,
      791,  791,  145,  542,  599,  542,  599,  538,  195,  593,
      195,  195,  195,  195,  195,  112,  145,  542,  195,  594,
      791,  595,  195,  195,  195,  595,  595,  595,  595,  595,
      595,  595,  595,  595,  595,  595,  540,  791,  791,  791,
      541,  791,  791,  145,  542,  791,  542,  195,  597,  195,
      195,  195,  195,  195,  791,  145,  472,  195,  472,  791,
      473,  195,  195,  195,  474,  195,  474,  474,  474,  474,

      474,  474,  474,  474,  474,  195,  598,  195,  195,  195,
      541,  195,   90,  145,  599,  195,  600,  791,  601,  195,
      195,  195,  602,  544,  602,  602,  602,  602,  602,  602,
      602,  602,  602,  195,  540,  195,  195,  195,  541,  195,
       90,  145,  542,  195,  543,  791,  544,  195,  195,  195,
      544,  544,  544,  544,  544,  544,  544,  544,  544,  544,
      544,  261,  547,  261,  261,  261,  261,  261,  791,  201,
      482,  261,  482,  791,  330,  261,  261,  261,  331,  261,
      331,  331,  331,  331,  331,  331,  331,  331,  331,  261,
      606,  261,  261,  261,  261,  261,  112,  201,  482,  261,

      548,  791,  549,  261,  261,  261,  550,  479,  550,  550,
      550,  550,  550,  550,  550,  550,  550,  261,  408,  261,
      261,  261,  409,  261,  112,  201,  264,  261,  478,  791,
      549,  261,  261,  261,  479,  479,  479,  479,  479,  479,
      479,  479,  479,  479,  479,  261,  408,  261,  261,  261,
      409,  261,   90,  201,  264,  261,  410,  791,  411,  261,
      261,  261,  411,  411,  411,  411,  411,  411,  411,  411,
      411,  411,  411,  412,  554,  412,  412,  412,  412,  412,
      791,  333,  412,  412,  412,  791,  555,  412,  412,  412,
      556,  412,  556,  556,  556,  556,  556,  556,  556,  556,

      556,  413,  710,  791,  628,  717,  791,  791,  629,  415,
      611,  415,  611,  683,  791,  683,  719,  412,  791,  412,
      412,  412,  412,  412,  412,  412,  412,  412,  412,  413,
      412,  412,  412,  412,  412,  112,  333,  415,  412,  607,
      791,  608,  412,  412,  412,  608,  608,  608,  608,  608,
      608,  608,  608,  608,  608,  608,  412,  610,  412,  412,
      412,  558,  412,   90,  333,  611,  412,  612,  791,  613,
      412,  412,  412,  614,  560,  614,  614,  614,  614,  614,
      614,  614,  614,  614,  412,  557,  412,  412,  412,  558,
      412,   90,  333,  415,  412,  559,  791,  560,  412,  412,

      412,  560,  560,  560,  560,  560,  560,  560,  560,  560,
      560,  560,  412,  412,  412,  412,  412,  412,  412,  401,
      414,  412,  416,  561,  791,  561,  412,  412,  412,  561,
      561,  561,  561,  561,  561,  561,  561,  561,  561,  561,
      615,  791,  791,  779,  616,  724,  725,  563,  617,  564,
      617,  492,  791,  637,  649,  637,  649,  377,  377,  791,
      618,  791,  618,  618,  618,  618,  618,  618,  618,  618,
      618,  207,  565,  207,  207,  207,  207,  207,  791,  154,
      422,  207,  422,  791,  272,  207,  207,  207,  273,  207,
      273,  273,  273,  273,  273,  273,  273,  273,  273,  344,

      619,  344,  344,  344,  344,  344,  112,  275,  570,  344,
      620,  791,  621,  344,  344,  344,  622,  568,  622,  622,
      622,  622,  622,  622,  622,  622,  622,  344,  566,  344,
      344,  344,  344,  344,  112,  275,  348,  344,  567,  791,
      568,  344,  344,  344,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  344,  569,  344,  344,  344,
      346,  344,  791,  275,  570,  344,  570,  791,  429,  344,
      344,  344,  430,  344,  430,  430,  430,  430,  430,  430,
      430,  430,  430,  344,  624,  344,  344,  344,  346,  344,
       90,  275,  570,  344,  571,  791,  572,  344,  344,  344,

      573,  504,  573,  573,  573,  573,  573,  573,  573,  573,
      573,  345,  723,  750,  660,  791,  629,  377,  603,  348,
      683,  503,  683,  791,  791,  727,  735,  504,  791,  504,
      504,  504,  504,  504,  504,  504,  504,  504,  357,  575,
      357,  357,  357,  357,  357,  791,  287,  576,  357,  576,
      791,  577,  357,  357,  357,  578,  357,  578,  578,  578,
      578,  578,  578,  578,  578,  578,  625,  744,  750,  791,
      791,  616,  377,  287,  791,  745,  791,  745,  626,  791,
      377,  778,  627,  791,  627,  627,  627,  627,  627,  627,
      627,  627,  627,  628,  749,  377,  377,  629,  791,  791,

      287,  630,  683,  630,  683,  577,  357,  628,  357,  357,
      357,  629,  357,   90,  287,  630,  357,  631,  791,  632,
      357,  357,  357,  632,  632,  632,  632,  632,  632,  632,
      632,  632,  632,  632,  579,  763,  615,  791,  791,  738,
      616,  768,  791,  764,  791,  764,  580,  791,  770,  745,
      581,  745,  581,  581,  581,  581,  581,  581,  581,  581,
      581,  633,  773,  791,  791,  791,  616,  791,  287,  435,
      745,  435,  745,  580,  357,  633,  357,  357,  357,  357,
      357,   34,  287,  435,  357,  634,  791,  635,  357,  357,
      357,  635,  635,  635,  635,  635,  635,  635,  635,  635,

      635,  635,  357,  636,  357,  357,  357,  434,  357,   27,
      287,  637,  357,  638,  791,  639,  357,  357,  357,  640,
      583,  640,  640,  640,  640,  640,  640,  640,  640,  640,
      357,  433,  357,  357,  357,  434,  357,   27,  287,  435,
      357,  582,  791,  583,  357,  357,  357,  583,  583,  583,
      583,  583,  583,  583,  583,  583,  583,  583,  175,  584,
      175,  175,  175,  175,  175,  791,  135,  443,  175,  443,
      791,  297,  175,  175,  175,  298,  175,  298,  298,  298,
      298,  298,  298,  298,  298,  298,  453,  781,  791,  791,
      791,  791,  791,  307,  454,  764,  454,  764,  586,  377,

      453,  377,  377,  377,  377,  377,   34,  307,  454,  377,
      641,  791,  642,  377,  377,  377,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  588,  729,  791,
      791,  589,  730,  779,  307,  454,  791,  454,  643,  791,
      776,  791,  791,  307,  644,  791,  644,  377,  377,  645,
      646,  647,  377,  648,  377,  377,  377,  589,  377,   27,
      307,  649,  377,  650,  791,  651,  377,  377,  377,  652,
      591,  652,  652,  652,  652,  652,  652,  652,  652,  652,
      377,  588,  377,  377,  377,  589,  377,   27,  307,  454,
      377,  590,  791,  591,  377,  377,  377,  591,  591,  591,

      591,  591,  591,  591,  591,  591,  591,  591,  195,  653,
      195,  195,  195,  195,  195,  112,  145,  599,  195,  654,
      791,  655,  195,  195,  195,  656,  595,  656,  656,  656,
      656,  656,  656,  656,  656,  656,  660,  737,  791,  791,
      788,  738,  791,  604,  661,  605,  661,  546,  745,  783,
      745,  791,  791,  791,  791,  791,  662,  791,  662,  662,
      662,  662,  662,  662,  662,  662,  662,  412,  663,  412,
      412,  412,  412,  412,  112,  333,  611,  412,  664,  791,
      665,  412,  412,  412,  666,  608,  666,  666,  666,  666,
      666,  666,  666,  666,  666,  412,  667,  412,  412,  412,

      412,  412,  791,  333,  487,  412,  487,  791,  488,  412,
      412,  412,  489,  412,  489,  489,  489,  489,  489,  489,
      489,  489,  489,  562,  671,  562,  562,  562,  562,  562,
      791,  492,  672,  562,  672,  791,  673,  562,  562,  562,
      674,  562,  674,  674,  674,  674,  674,  674,  674,  674,
      674,  562,  562,  562,  562,  562,  562,  562,  335,  563,
      562,  564,  675,  791,  675,  562,  562,  562,  675,  675,
      675,  675,  675,  675,  675,  675,  675,  675,  675,  357,
      677,  357,  357,  357,  357,  357,  112,  287,  630,  357,
      678,  791,  679,  357,  357,  357,  679,  679,  679,  679,

      679,  679,  679,  679,  679,  679,  679,  357,  682,  357,
      357,  357,  629,  357,   90,  287,  683,  357,  684,  791,
      685,  357,  357,  357,  686,  632,  686,  686,  686,  686,
      686,  686,  686,  686,  686,  357,  687,  357,  357,  357,
      357,  357,   34,  287,  637,  357,  688,  791,  689,  357,
      357,  357,  690,  635,  690,  690,  690,  690,  690,  690,
      690,  690,  690,  377,  693,  377,  377,  377,  377,  377,
       34,  307,  649,  377,  694,  791,  695,  377,  377,  377,
      696,  642,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  377,  697,  377,  377,  377,  377,  377,  791,  307,

      525,  377,  525,  791,  526,  377,  377,  377,  527,  377,
      527,  527,  527,  527,  527,  527,  527,  527,  527,  377,
      698,  377,  377,  377,  377,  377,  791,  307,  699,  377,
      699,  791,  700,  377,  646,  646,  701,  377,  701,  701,
      701,  701,  701,  701,  701,  701,  701,  603,  705,  603,
      603,  603,  603,  603,  791,  546,  706,  603,  706,  791,
      707,  603,  603,  603,  708,  603,  708,  708,  708,  708,
      708,  708,  708,  708,  708,  603,  603,  603,  603,  603,
      603,  603,  401,  604,  603,  605,  709,  791,  709,  603,
      603,  603,  709,  709,  709,  709,  709,  709,  709,  709,

      709,  709,  709,  712,  787,  791,  791,  791,  738,  791,
      492,  791,  764,  791,  764,  713,  791,  791,  791,  714,
      791,  714,  714,  714,  714,  714,  714,  714,  714,  714,
      562,  615,  562,  562,  562,  616,  562,   90,  492,  617,
      562,  715,  791,  716,  562,  562,  562,  716,  716,  716,
      716,  716,  716,  716,  716,  716,  716,  716,  357,  717,
      357,  357,  357,  357,  357,  112,  287,  683,  357,  718,
      791,  719,  357,  357,  357,  720,  679,  720,  720,  720,
      720,  720,  720,  720,  720,  720,  726,  790,  791,  791,
      791,  791,  791,  791,  791,  764,  791,  764,  727,  791,

      791,  791,  728,  791,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  729,  791,  791,  791,  730,  791,  791,
      307,  731,  791,  731,  791,  700,  377,  729,  377,  377,
      377,  730,  377,   90,  307,  731,  377,  732,  791,  733,
      377,  377,  377,  733,  733,  733,  733,  733,  733,  733,
      733,  733,  733,  733,  734,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  735,  791,  791,  791,
      736,  791,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  737,  791,  791,  791,  738,  791,  791,  546,  661,
      791,  661,  791,  707,  603,  737,  603,  603,  603,  738,

      603,   90,  546,  661,  603,  739,  791,  740,  603,  603,
      603,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  741,  791,  791,  791,  562,  791,  791,  492,
      791,  562,  791,  791,  713,  562,  741,  562,  562,  562,
      562,  562,  112,  492,  617,  562,  742,  791,  743,  562,
      562,  562,  743,  743,  743,  743,  743,  743,  743,  743,
      743,  743,  743,  562,  744,  562,  562,  562,  616,  562,
       90,  492,  745,  562,  746,  791,  747,  562,  562,  562,
      748,  716,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  377,  750,  377,  377,  377,  377,  377,  112,  307,

      731,  377,  751,  791,  752,  377,  377,  377,  752,  752,
      752,  752,  752,  752,  752,  752,  752,  752,  752,  377,
      755,  377,  377,  377,  730,  377,   90,  307,  756,  377,
      757,  791,  758,  377,  377,  377,  759,  733,  759,  759,
      759,  759,  759,  759,  759,  759,  759,  603,  660,  603,
      603,  603,  603,  603,  112,  546,  661,  603,  760,  791,
      761,  603,  603,  603,  761,  761,  761,  761,  761,  761,
      761,  761,  761,  761,  761,  603,  763,  603,  603,  603,
      738,  603,   90,  546,  764,  603,  765,  791,  766,  603,
      603,  603,  767,  740,  767,  767,  767,  767,  767,  767,

      767,  767,  767,  562,  768,  562,  562,  562,  562,  562,
      112,  492,  745,  562,  769,  791,  770,  562,  562,  562,
      771,  743,  771,  771,  771,  771,  771,  771,  771,  771,
      771,  377,  774,  377,  377,  377,  377,  377,  112,  307,
      756,  377,  775,  791,  776,  377,  377,  377,  777,  752,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  755,
      791,  791,  791,  730,  791,  791,  791,  756,  791,  756,
      791,  791,  791,  377,  377,  603,  781,  603,  603,  603,
      603,  603,  112,  546,  764,  603,  782,  791,  783,  603,
      603,  603,  784,  761,  784,  784,  784,  784,  784,  784,

      784,  784,  784,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,   22,  791,  791,
      791,  791,  791,  791,  791,  791,   22,  791,   22,   29,
      791,   29,   29,  791,   29,  791,   29,  791,   29,  791,
       29,   29,   36,  791,  791,   36,  791,   36,  791,   36,
      791,   36,  791,   36,   36,   44,  791,  791,  791,  791,
       44,  791,   44,  791,   44,  791,   44,   45,   45,   45,
       45,   45,  791,   45,   45,   45,  791,   45,   45,   45,
       45,   55,   55,   55,   55,   55,  791,   55,   55,   55,
      791,   55,   55,   55,   55,   60,  791,  791,   60,  791,

       60,  791,   60,  791,   60,  791,   60,   60,   65,  791,
      791,  791,  791,   65,  791,   65,  791,   65,   65,   65,
       66,   66,   66,   66,   66,   66,   66,   66,   66,  791,
       66,   66,   66,   66,   77,   77,   77,   77,   77,   77,
       77,   77,   77,  791,   77,   77,   77,   77,   86,  791,
      791,  791,  791,  791,  791,  791,  791,   86,  791,   86,
       92,  791,   92,   92,  791,   92,  791,   92,  791,   92,
      791,   92,   92,   93,   93,   93,   93,   93,   93,   93,
       93,   93,  791,   93,   93,   93,   93,   98,   98,   98,
       98,   98,   98,   98,   98,   98,  791,   98,   98,   98,

       98,  104,  104,  104,  104,  104,  104,  104,  104,  104,
      791,  104,  104,  104,  104,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  791,  108,  108,  108,  108,  114,
      791,  791,  114,  791,  114,  791,  114,  791,  114,  791,
      114,  114,  117,  117,  117,  117,  117,  791,  117,  117,
      117,  791,  117,  117,  117,  117,  134,  134,  134,  134,
      134,  134,  134,  134,  134,  791,  134,  134,  134,  134,
      144,  144,  144,  144,  144,  144,  144,  144,  144,  791,
      144,  144,  144,  144,  146,  146,  146,  146,  146,  791,
      146,  146,  146,  791,  146,  146,  146,  146,  151,  791,

      791,  151,  791,  151,  791,  151,  791,  151,  791,  151,
      151,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      791,  153,  153,  153,  153,  169,  169,  791,  169,  169,
      791,  169,  791,  169,  169,  175,  175,  175,  175,  175,
      175,  175,  175,  175,  791,  175,  175,  175,  175,  187,
      187,  791,  187,  187,  791,  187,  791,  187,  187,  195,
      195,  195,  195,  195,  195,  195,  195,  195,  791,  195,
      195,  195,  195,  200,  200,  200,  200,  200,  200,  200,
      200,  200,  791,  200,  200,  200,  200,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  791,  207,  207,  207,

      207,  212,  212,  212,  212,  212,  212,  212,  212,  212,
      791,  212,  212,  212,  212,  223,  223,  223,  223,  223,
      791,  223,  223,  223,  791,  223,  223,  223,  223,  242,
      242,  791,  242,  242,  242,  242,  242,  242,  242,  242,
      242,  242,  242,  243,  243,  243,  243,  243,  791,  243,
      243,  243,  791,  243,  243,  243,  243,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  791,  261,  261,  261,
      261,  265,  265,  265,  265,  265,  265,  265,  265,  265,
      791,  265,  265,  265,  265,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  791,  274,  274,  274,  274,  286,

      286,  286,  286,  286,  286,  286,  286,  286,  791,  286,
      286,  286,  286,  306,  306,  306,  306,  306,  306,  306,
      306,  306,  791,  306,  306,  306,  306,  332,  332,  332,
      332,  332,  332,  332,  332,  332,  791,  332,  332,  332,
      332,  338,  338,  791,  338,  338,  791,  338,  791,  338,
      338,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      791,  344,  344,  344,  344,  286,  286,  286,  286,  286,
      286,  286,  286,  286,  791,  286,  286,  286,  286,  357,
      357,  357,  357,  791,  357,  357,  357,  357,  791,  357,
      357,  357,  357,  242,  242,  791,  242,  242,  242,  242,

      242,  242,  242,  242,  242,  242,  242,  306,  306,  306,
      306,  306,  306,  306,  306,  306,  791,  306,  306,  306,
      306,  377,  377,  377,  377,  791,  377,  377,  377,  377,
      791,  377,  377,  377,  377,  104,  104,  104,  104,  791,
      104,  104,  104,  104,  791,  104,  104,  104,  104,  404,
      404,  791,  404,  404,  791,  404,  791,  404,  404,  261,
      261,  261,  261,  791,  261,  261,  261,  261,  791,  261,
      261,  261,  261,  332,  332,  332,  332,  332,  332,  332,
      332,  332,  791,  332,  332,  332,  332,  412,  412,  412,
      412,  412,  412,  412,  412,  412,  791,  412,  412,  412,

      412,  417,  417,  417,  417,  417,  791,  417,  417,  417,
      791,  417,  417,  417,  417,  338,  338,  791,  338,  338,
      791,  338,  791,  338,  338,  344,  344,  344,  344,  791,
      344,  344,  344,  344,  791,  344,  344,  344,  344,  357,
      357,  357,  357,  791,  357,  357,  357,  357,  791,  357,
      357,  357,  357,  377,  377,  377,  377,  791,  377,  377,
      377,  377,  791,  377,  377,  377,  377,  195,  195,  195,
      195,  791,  195,  195,  195,  195,  791,  195,  195,  195,
      195,  477,  477,  477,  477,  477,  791,  477,  477,  477,
      791,  477,  477,  477,  477,  404,  404,  791,  404,  404,

      791,  404,  791,  404,  404,  412,  412,  412,  412,  791,
      412,  412,  412,  412,  791,  412,  412,  412,  412,  491,
      491,  491,  491,  491,  491,  491,  491,  491,  791,  491,
      491,  491,  491,  207,  207,  207,  207,  791,  207,  207,
      207,  207,  791,  207,  207,  207,  207,  344,  344,  344,
      344,  791,  344,  344,  344,  344,  791,  344,  344,  344,
      344,  357,  357,  357,  357,  791,  357,  357,  357,  357,
      791,  357,  357,  357,  357,  175,  175,  175,  175,  791,
      175,  175,  175,  175,  791,  175,  175,  175,  175,  377,
      377,  377,  377,  791,  377,  377,  377,  377,  791,  377,

      377,  377,  377,  104,  104,  104,  104,  791,  104,  104,
      104,  104,  791,  104,  104,  104,  104,  195,  195,  195,
      195,  791,  195,  195,  195,  195,  791,  195,  195,  195,
      195,  545,  545,  545,  545,  545,  545,  545,  545,  545,
      791,  545,  545,  545,  545,  412,  412,  412,  412,  791,
      412,  412,  412,  412,  791,  412,  412,  412,  412,  491,
      491,  491,  491,  491,  491,  491,  491,  491,  791,  491,
      491,  491,  491,  562,  562,  562,  562,  791,  562,  562,
      562,  562,  791,  562,  562,  562,  562,  357,  357,  357,
      357,  791,  357,  357,  357,  357,  791,  357,  357,  357,

      357,  377,  377,  377,  377,  791,  377,  377,  377,  377,
      791,  377,  377,  377,  377,  545,  545,  545,  545,  545,
      545,  545,  545,  545,  791,  545,  545,  545,  545,  603,
      603,  603,  603,  791,  603,  603,  603,  603,  791,  603,
      603,  603,  603,  562,  562,  562,  562,  791,  562,  562,
      562,  562,  791,  562,  562,  562,  562,  344,  344,  344,
      344,  791,  344,  344,  344,  344,  791,  344,  344,  344,
      344,    7,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791

    } ;

static yyconst flex_int16_t yy_chk[9001] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    3,    4,
        3,    4,   11,   13,   19,   11,   20,   19,  856,   21,
       43,   45,   45,   55,   55,   13,   14,   21,   20,   21,
       14,   21,   43,   57,   14,  391,   14,   57,   14,   15,
       22,   63,  391,   15,   25,   15,   22,   15,   22,   15,
       22,   23,   25,   63,   25,   23,   25,   33,  849,   23,
       59,   23,   24,  834,   59,   33,  830,   33,   24,   88,
       24,   88,   59,   24,   24,   24,   27,  813,   27,   27,

       27,   27,   27,   27,   27,   27,   27,   28,   36,   66,
       66,   28,  811,   28,   36,   28,   36,   28,   36,   28,
       68,   68,  786,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   29,   77,   77,   83,   29,  148,
       29,   83,   29,  148,   29,   34,  785,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   35,   38,   79,   79,
       84,  287,   35,  287,   35,   38,   35,   38,   35,   38,
       86,   47,   84,   35,   39,   47,   86,  111,   86,   47,
       86,   47,   39,   85,   39,  111,   39,  111,   39,   39,
       40,   85,  307,   85,  307,   85,   93,   93,   40,  206,

       40,  782,   40,  206,   40,   40,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,  780,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,  775,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   58,   87,   98,   98,  772,   87,   58,  769,
       58,   87,   58,   87,   58,   99,   99,  104,  104,   58,
       64,  108,  108,  132,   64,  109,  109,  356,   64,  132,
       64,  356,   64,   65,  117,  117,  224,   65,  766,   65,

      224,   65,  224,   65,   67,  124,  124,  492,   67,  492,
       67,   67,   67,  124,   67,   69,  127,  127,  546,   69,
      546,   69,   69,   69,  114,   69,   70,   70,  129,  129,
      114,  129,  114,  452,  114,  765,   70,  452,   70,   70,
       70,   70,   70,   70,   70,   70,   70,   78,  134,  134,
      144,  144,  119,   78,   78,   78,  119,   78,   80,  476,
      119,  764,  119,  476,   80,   80,   80,  762,   80,   81,
       81,  139,  139,  506,  139,  146,  146,  153,  153,   81,
      506,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       90,  758,   90,   90,   90,   90,   90,   90,   90,   90,

       90,   91,  150,  155,  155,   91,  150,   91,  498,   91,
      757,   91,  498,   91,  150,  162,  162,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   92,  747,
      169,  169,   92,  169,   92,  615,   92,  615,   92,   95,
      175,  175,  522,   95,   95,   95,  522,   95,  195,  195,
       95,   95,   95,   97,   97,   97,   97,   97,   97,   97,
      746,   97,   97,   97,   97,  745,   97,   97,   97,   97,
       97,   97,   97,   97,   97,   97,   97,   97,   97,   97,
       97,  105,  178,  178,  737,  178,  535,  105,  105,  105,
      535,  105,  107,  107,  107,  107,  107,  107,  107,  729,

      107,  107,  107,  107,  722,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      112,  721,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  113,  167,  718,  189,  711,  167,  113,  189,  113,
      167,  113,  167,  113,  187,  187,  189,  187,  113,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  702,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  126,  126,  126,
      126,  126,  126,  126,  694,  126,  126,  126,  126,  691,
      126,  126,  126,  126,  126,  126,  126,  126,  126,  126,

      126,  126,  126,  126,  126,  131,  131,  131,  131,  131,
      131,  131,  688,  131,  131,  131,  131,  685,  131,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  684,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  135,  200,  200,  683,  135,  681,  135,  135,  135,
      135,  135,  141,  141,  141,  141,  141,  141,  141,  680,
      141,  141,  141,  141,  670,  141,  141,  141,  141,  141,
      141,  141,  141,  141,  141,  141,  141,  141,  141,  141,

      142,  185,  202,  202,  142,  668,  142,  142,  142,  185,
      142,  185,  142,  143,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  143,  664,  143,  143,  143,  143,
      143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
      143,  145,  207,  207,  212,  212,  658,  145,  145,  145,
      145,  145,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  657,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      149,  171,  213,  213,  643,  171,  149,  171,  149,  654,
      149,  643,  149,  171,  223,  223,  651,  149,  154,  209,

      209,  209,  154,  209,  154,  154,  154,  650,  154,  156,
      216,  220,  649,  156,  216,  156,  156,  156,  647,  156,
      157,  157,  216,  232,  232,  220,  220,  235,  235,  639,
      157,  232,  157,  157,  157,  157,  157,  157,  157,  157,
      157,  163,  227,  243,  243,  553,  227,  246,  246,  553,
      227,  638,  227,  163,  619,  246,  637,  163,  619,  163,
      163,  163,  163,  163,  163,  163,  163,  163,  164,  249,
      249,  676,  164,  774,  164,  676,  164,  774,  164,  630,
      164,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  628,  165,  165,  165,  165,  165,  165,

      165,  165,  165,  165,  165,  165,  165,  165,  165,  172,
      172,  172,  172,  172,  172,  172,  172,  172,  172,  172,
      172,  624,  172,  172,  172,  172,  172,  172,  172,  172,
      172,  172,  172,  172,  172,  172,  172,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  622,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  176,  261,  261,  620,  176,
      789,  176,  176,  176,  789,  176,  177,  265,  265,  613,
      177,  177,  177,  612,  177,  266,  266,  177,  177,  177,
      179,  179,  179,  179,  179,  179,  179,  611,  179,  179,

      179,  179,  606,  179,  179,  179,  179,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  180,  180,
      269,  269,  603,  269,  274,  274,  286,  286,  180,  601,
      180,  180,  180,  180,  180,  180,  180,  180,  180,  190,
      190,  190,  190,  190,  190,  190,  190,  190,  190,  190,
      190,  600,  190,  190,  190,  190,  190,  190,  190,  190,
      190,  190,  190,  190,  190,  190,  190,  192,  295,  295,
      599,  192,  192,  192,  596,  192,  306,  306,  192,  192,
      192,  193,  193,  193,  193,  193,  193,  193,  193,  193,
      193,  193,  193,  592,  193,  193,  193,  193,  193,  193,

      193,  193,  193,  193,  193,  193,  193,  193,  193,  196,
      332,  332,  573,  288,  251,  196,  196,  196,  251,  196,
      197,  288,  251,  288,  251,  562,  197,  197,  197,  197,
      197,  198,  198,  198,  198,  198,  198,  198,  536,  198,
      198,  198,  198,  511,  198,  198,  198,  198,  198,  198,
      198,  198,  198,  198,  198,  198,  198,  198,  198,  199,
      199,  327,  327,  510,  327,  394,  394,  485,  279,  199,
      482,  199,  199,  199,  199,  199,  199,  199,  199,  199,
      201,  276,  279,  279,  465,  276,  201,  201,  201,  462,
      201,  203,  280,  276,  282,  417,  417,  203,  203,  203,

      460,  203,  204,  204,  477,  477,  280,  280,  282,  282,
      338,  338,  204,  338,  204,  204,  204,  204,  204,  204,
      204,  204,  204,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  446,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  211,  211,  211,  211,  211,  211,  211,  443,  211,
      211,  211,  211,  441,  211,  211,  211,  211,  211,  211,
      211,  211,  211,  211,  211,  211,  211,  211,  211,  217,
      217,  217,  217,  217,  217,  217,  217,  217,  217,  217,
      217,  427,  217,  217,  217,  217,  217,  217,  217,  217,

      217,  217,  217,  217,  217,  217,  217,  219,  293,  491,
      491,  219,  293,  509,  509,  219,  293,  219,  293,  219,
      221,  221,  221,  221,  221,  221,  221,  221,  221,  221,
      221,  221,  425,  221,  221,  221,  221,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  221,  221,  225,  225,
      225,  225,  225,  225,  225,  225,  225,  225,  225,  225,
      412,  225,  225,  225,  225,  225,  225,  225,  225,  225,
      225,  225,  225,  225,  225,  225,  234,  234,  234,  234,
      234,  234,  234,  400,  234,  234,  234,  234,  397,  234,
      234,  234,  234,  234,  234,  234,  234,  234,  234,  234,

      234,  234,  234,  234,  238,  300,  322,  545,  545,  300,
      322,  308,  346,  346,  395,  346,  238,  300,  322,  308,
      238,  308,  238,  238,  238,  238,  238,  238,  238,  238,
      238,  240,  240,  240,  240,  240,  240,  240,  240,  240,
      240,  240,  240,  377,  240,  240,  240,  240,  240,  240,
      240,  240,  240,  240,  240,  240,  240,  240,  240,  241,
      241,  241,  241,  241,  241,  241,  241,  241,  241,  241,
      241,  376,  241,  241,  241,  241,  241,  241,  241,  241,
      241,  241,  241,  241,  241,  241,  241,  244,  244,  244,
      244,  244,  244,  244,  244,  244,  244,  244,  244,  357,

      244,  244,  244,  244,  244,  244,  244,  244,  244,  244,
      244,  244,  244,  244,  244,  247,  247,  247,  247,  247,
      247,  247,  344,  247,  247,  247,  247,  317,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  248,  248,  248,  248,  248,  248,  248,
      305,  248,  248,  248,  248,  294,  248,  248,  248,  248,
      248,  248,  248,  248,  248,  248,  248,  248,  248,  248,
      248,  257,  318,  364,  646,  646,  318,  364,  354,  673,
      318,  673,  318,  257,  673,  364,  354,  257,  354,  257,
      257,  257,  257,  257,  257,  257,  257,  257,  258,  292,

      404,  404,  258,  404,  258,  258,  285,  258,  698,  698,
      258,  259,  259,  259,  259,  259,  259,  259,  259,  259,
      259,  259,  259,  268,  259,  259,  259,  259,  259,  259,
      259,  259,  259,  259,  259,  259,  259,  259,  259,  260,
      260,  260,  260,  260,  260,  260,  260,  260,  260,  260,
      260,  254,  260,  260,  260,  260,  260,  260,  260,  260,
      260,  260,  260,  260,  260,  260,  260,  262,  541,  541,
      253,  541,  252,  262,  262,  262,  250,  262,  264,  264,
      264,  264,  264,  264,  264,  242,  264,  264,  264,  264,
      239,  264,  264,  264,  264,  264,  264,  264,  264,  264,

      264,  264,  264,  264,  264,  264,  271,  271,  271,  271,
      271,  271,  271,  236,  271,  271,  271,  271,  233,  271,
      271,  271,  271,  271,  271,  271,  271,  271,  271,  271,
      271,  271,  271,  271,  272,  336,  230,  229,  272,  336,
      272,  272,  272,  336,  272,  336,  272,  273,  273,  273,
      273,  273,  273,  273,  273,  273,  273,  273,  273,  228,
      273,  273,  273,  273,  273,  273,  273,  273,  273,  273,
      273,  273,  273,  273,  273,  275,  218,  616,  616,  275,
      616,  275,  275,  275,  275,  275,  277,  277,  277,  277,
      277,  277,  277,  277,  277,  277,  277,  277,  208,  277,

      277,  277,  277,  277,  277,  277,  277,  277,  277,  277,
      277,  277,  277,  277,  281,  355,  629,  629,  281,  629,
      191,  183,  281,  355,  281,  355,  182,  161,  281,  281,
      283,  283,  283,  283,  283,  283,  283,  283,  283,  283,
      283,  283,  160,  283,  283,  283,  283,  283,  283,  283,
      283,  283,  283,  283,  283,  283,  283,  283,  284,  365,
      159,  384,  380,  152,  138,  384,  284,  365,  284,  365,
      380,  365,  380,  384,  284,  137,  284,  284,  284,  284,
      284,  284,  284,  284,  284,  289,  289,  289,  289,  289,
      289,  289,  289,  289,  289,  289,  289,  136,  289,  289,

      289,  289,  289,  289,  289,  289,  289,  289,  289,  289,
      289,  289,  289,  290,  290,  290,  290,  290,  290,  290,
      290,  290,  290,  290,  290,  128,  290,  290,  290,  290,
      290,  290,  290,  290,  290,  290,  290,  290,  290,  290,
      290,  296,  369,  408,  125,  122,  121,  408,  402,  120,
      369,  116,  369,  296,  369,  408,  402,  296,  402,  296,
      296,  296,  296,  296,  296,  296,  296,  296,  297,  373,
      115,  103,  297,  373,  102,  101,  297,  373,  297,  373,
      297,  298,  298,  298,  298,  298,  298,  298,  298,  298,
      298,  298,  298,   94,  298,  298,  298,  298,  298,  298,

      298,  298,  298,  298,  298,  298,  298,  298,  298,  299,
      385,  730,  730,   89,  730,   76,  413,   75,  385,   74,
      385,  299,  385,  413,  413,  299,  413,  299,  299,  299,
      299,  299,  299,  299,  299,  299,  301,  301,  301,  301,
      301,  301,  301,  301,  301,  301,  301,  301,   73,  301,
      301,  301,  301,  301,  301,  301,  301,  301,  301,  301,
      301,  301,  301,  301,  302,  302,  302,  302,  302,  302,
      302,  302,  302,  302,  302,  302,   72,  302,  302,  302,
      302,  302,  302,  302,  302,  302,  302,  302,  302,  302,
      302,  302,  303,  303,  303,  303,  303,  303,  303,  303,

      303,  303,  303,  303,   54,  303,  303,  303,  303,  303,
      303,  303,  303,  303,  303,  303,  303,  303,  303,  303,
      304,  304,  304,  304,  304,  304,  304,  304,  304,  304,
      304,  304,   53,  304,  304,  304,  304,  304,  304,  304,
      304,  304,  304,  304,  304,  304,  304,  304,  309,  309,
      309,  309,  309,  309,  309,  309,  309,  309,  309,  309,
       52,  309,  309,  309,  309,  309,  309,  309,  309,  309,
      309,  309,  309,  309,  309,  309,  310,  310,  310,  310,
      310,  310,  310,  310,  310,  310,  310,  310,   50,  310,
      310,  310,  310,  310,  310,  310,  310,  310,  310,  310,

      310,  310,  310,  310,  311,  311,  311,  311,  311,  311,
      311,  311,  311,  311,  311,  311,   49,  311,  311,  311,
      311,  311,  311,  311,  311,  311,  311,  311,  311,  311,
      311,  311,  313,  313,  313,  313,  313,  313,  313,   48,
      313,  313,  313,  313,   42,  313,  313,  313,  313,  313,
      313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
      314,  314,  314,  314,  314,  314,  314,   41,  314,  314,
      314,  314,   37,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  315,  396,
       32,   31,  315,  396,   30,  315,  315,  396,  315,  396,

      315,  316,  316,  316,  316,  316,  316,  316,  316,  316,
      316,  316,  316,   18,  316,  316,  316,  316,  316,  316,
      316,  316,  316,  316,  316,  316,  316,  316,  316,  319,
      319,  319,  319,  319,  319,  319,    7,  319,  319,  319,
      319,    6,  319,  319,  319,  319,  319,  319,  319,  319,
      319,  319,  319,  319,  319,  319,  319,  320,  409,  738,
      738,    5,  738,    0,  418,  320,  409,  320,  409,    0,
      409,  418,  418,  320,  418,  320,  320,  320,  320,  320,
      320,  320,  320,  320,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,    0,  321,  321,  321,

      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  323,  422,  323,    0,    0,  422,    0,    0,
      323,  422,  323,  422,  323,  323,  323,  323,  324,  324,
      324,  324,  324,  324,  324,  324,  324,  324,  324,  324,
        0,  324,  324,  324,  324,  324,  324,  324,  324,  324,
      324,  324,  324,  324,  324,  324,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,    0,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  326,  326,  326,  326,  326,  326,
      326,  326,  326,  326,  326,  326,    0,  326,  326,  326,

      326,  326,  326,  326,  326,  326,  326,  326,  326,  326,
      326,  326,  328,  328,  328,  328,  328,  328,  328,    0,
      328,  328,  328,  328,    0,  328,  328,  328,  328,  328,
      328,  328,  328,  328,  328,  328,  328,  328,  328,  328,
      329,  329,  329,  329,  329,  329,  329,    0,  329,  329,
      329,  329,    0,  329,  329,  329,  329,  329,  329,  329,
      329,  329,  329,  329,  329,  329,  329,  329,  330,  442,
        0,    0,  330,  442,    0,  330,  330,  442,  330,  442,
      330,  331,  331,  331,  331,  331,  331,  331,  331,  331,
      331,  331,  331,    0,  331,  331,  331,  331,  331,  331,

      331,  331,  331,  331,  331,  331,  331,  331,  331,  333,
        0,    0,    0,    0,    0,  333,  333,  333,  333,  333,
      334,  334,  334,  334,  334,  334,  334,    0,  334,  334,
      334,  334,    0,  334,  334,  334,  334,  334,  334,  334,
      334,  334,  334,  334,  334,  334,  334,  334,  339,  339,
      339,  339,  339,  339,  339,    0,  339,  339,  339,  339,
        0,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  340,    0,    0,    0,
      437,  451,    0,    0,  340,    0,  340,  437,  437,  451,
      437,  451,  340,    0,  340,  340,  340,  340,  340,  340,

      340,  340,  340,  341,  341,  341,  341,  341,  341,  341,
      341,  341,  341,  341,  341,    0,  341,  341,  341,  341,
      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,
      341,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,    0,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  343,
      343,  343,  343,  343,  343,  343,  343,  343,  343,  343,
      343,    0,  343,  343,  343,  343,  343,  343,  343,  343,
      343,  343,  343,  343,  343,  343,  343,  345,    0,    0,
        0,  345,    0,  453,  345,  345,    0,  345,  347,    0,

      453,  453,  347,  453,  347,  347,  347,  347,  347,  348,
      348,  348,  348,  348,  348,  348,    0,  348,  348,  348,
      348,    0,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  349,  741,    0,
        0,    0,  741,    0,    0,  741,  349,  741,  349,  349,
      349,  349,  349,  349,  349,  349,  349,  350,  350,  350,
      350,  350,  350,  350,    0,  350,  350,  350,  350,    0,
      350,  350,  350,  350,  350,  350,  350,  350,  350,  350,
      350,  350,  350,  350,  350,  351,  351,  351,  351,  351,
      351,  351,  351,  351,  351,  351,  351,    0,  351,  351,

      351,  351,  351,  351,  351,  351,  351,  351,  351,  351,
      351,  351,  351,  352,  352,  352,  352,  352,  352,  352,
      352,  352,  352,  352,  352,    0,  352,  352,  352,  352,
      352,  352,  352,  352,  352,  352,  352,  352,  352,  352,
      352,  353,  353,  353,  353,  353,  353,  353,  353,  353,
      353,  353,  353,    0,  353,  353,  353,  353,  353,  353,
      353,  353,  353,  353,  353,  353,  353,  353,  353,  358,
        0,    0,  731,  358,  456,  470,  358,  358,  358,  358,
      359,  456,  456,  470,  456,  470,  731,  731,    0,  359,
        0,  359,  359,  359,  359,  359,  359,  359,  359,  359,

      360,  360,  360,  360,  360,  360,  360,    0,  360,  360,
      360,  360,    0,  360,  360,  360,  360,  360,  360,  360,
      360,  360,  360,  360,  360,  360,  360,  360,  361,  361,
      361,  361,  361,  361,  361,    0,  361,  361,  361,  361,
        0,  361,  361,  361,  361,  361,  361,  361,  361,  361,
      361,  361,  361,  361,  361,  361,  362,  461,    0,    0,
      475,  461,    0,  497,  362,  461,  362,  461,  475,    0,
      475,  497,  362,  497,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  363,  363,  363,  363,  363,  363,  363,
      363,  363,  363,  363,  363,    0,  363,  363,  363,  363,

      363,  363,  363,  363,  363,  363,  363,  363,  363,  363,
      363,  366,  366,  366,  366,  366,  366,  366,    0,  366,
      366,  366,  366,    0,  366,  366,  366,  366,  366,  366,
      366,  366,  366,  366,  366,  366,  366,  366,  366,  367,
      367,  367,  367,  367,  367,  367,  367,  367,  367,  367,
      367,    0,  367,  367,  367,  367,  367,  367,  367,  367,
      367,  367,  367,  367,  367,  367,  367,  368,  368,  368,
      368,  368,  368,  368,  368,  368,  368,  368,  368,    0,
      368,  368,  368,  368,  368,  368,  368,  368,  368,  368,
      368,  368,  368,  368,  368,  370,  370,  370,  370,  370,

      370,  370,  370,  370,  370,  370,  370,    0,  370,  370,
      370,  370,  370,  370,  370,  370,  370,  370,  370,  370,
      370,  370,  370,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  371,    0,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  372,  372,  372,  372,  372,  372,  372,    0,  372,
      372,  372,  372,    0,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  374,
      374,  374,  374,  374,  374,  374,  374,  374,  374,  374,
      374,    0,  374,  374,  374,  374,  374,  374,  374,  374,

      374,  374,  374,  374,  374,  374,  374,  375,  481,    0,
        0,  520,  481,    0,  521,  375,  481,  375,  481,  520,
        0,  520,  521,  375,  521,  375,  375,  375,  375,  375,
      375,  375,  375,  375,  378,    0,  753,    0,  533,  534,
        0,  378,  378,  378,  378,  379,  533,  534,  533,  534,
      753,  753,    0,    0,  379,    0,  379,  379,  379,  379,
      379,  379,  379,  379,  379,  381,  381,  381,  381,  381,
      381,  381,    0,  381,  381,  381,  381,    0,  381,  381,
      381,  381,  381,  381,  381,  381,  381,  381,  381,  381,
      381,  381,  381,  382,  551,    0,  557,  552,    0,    0,

      557,  382,  551,  382,  551,  552,    0,  552,  557,  382,
        0,  382,  382,  382,  382,  382,  382,  382,  382,  382,
      383,  383,  383,  383,  383,  383,  383,  383,  383,  383,
      383,  383,    0,  383,  383,  383,  383,  383,  383,  383,
      383,  383,  383,  383,  383,  383,  383,  383,  386,  386,
      386,  386,  386,  386,  386,    0,  386,  386,  386,  386,
        0,  386,  386,  386,  386,  386,  386,  386,  386,  386,
      386,  386,  386,  386,  386,  386,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387,    0,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,

      387,  387,  387,  387,  388,  388,  388,  388,  388,  388,
      388,  388,  388,  388,  388,  388,    0,  388,  388,  388,
      388,  388,  388,  388,  388,  388,  388,  388,  388,  388,
      388,  388,  389,  389,  389,  389,  389,  389,  389,  389,
      389,  389,  389,  389,    0,  389,  389,  389,  389,  389,
      389,  389,  389,  389,  389,  389,  389,  389,  389,  389,
      390,  390,  390,  390,  390,  390,  390,  390,  390,  390,
      390,  390,    0,  390,  390,  390,  390,  390,  390,  390,
      390,  390,  390,  390,  390,  390,  390,  390,  392,  392,
      392,  392,  392,  392,  392,    0,  392,  392,  392,  392,

        0,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  393,  393,  393,  393,
      393,  393,  393,    0,  393,  393,  393,  393,    0,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  398,  398,  398,  398,  398,  398,
      398,  398,  398,  398,  398,  398,    0,  398,  398,  398,
      398,  398,  398,  398,  398,  398,  398,  398,  398,  398,
      398,  398,  399,  558,    0,    0,    0,    0,    0,  566,
      399,  558,  399,  558,    0,  558,  566,  566,  399,  566,
      399,  399,  399,  399,  399,  399,  399,  399,  399,  405,

      405,  405,  405,  405,  405,  405,    0,  405,  405,  405,
      405,    0,  405,  405,  405,  405,  405,  405,  405,  405,
      405,  405,  405,  405,  405,  405,  405,  406,  570,    0,
        0,    0,  570,    0,  593,  406,  570,  406,  570,    0,
        0,  593,  593,  406,  593,  406,  406,  406,  406,  406,
      406,  406,  406,  406,  407,  407,  407,  407,  407,  407,
      407,  407,  407,  407,  407,  407,    0,  407,  407,  407,
      407,  407,  407,  407,  407,  407,  407,  407,  407,  407,
      407,  407,  410,  410,  410,  410,  410,  410,  410,  410,
      410,  410,  410,  410,    0,  410,  410,  410,  410,  410,

      410,  410,  410,  410,  410,  410,  410,  410,  410,  410,
      411,  411,  411,  411,  411,  411,  411,  411,  411,  411,
      411,  411,    0,  411,  411,  411,  411,  411,  411,  411,
      411,  411,  411,  411,  411,  411,  411,  411,  414,    0,
        0,    0,    0,    0,  414,  414,  414,  414,  414,  415,
      415,  415,  415,  415,  415,  415,    0,  415,  415,  415,
      415,    0,  415,  415,  415,  415,  415,  415,  415,  415,
      415,  415,  415,  415,  415,  415,  415,  416,    0,    0,
        0,    0,    0,    0,    0,    0,  416,    0,  416,  416,
      416,  416,  416,  416,  416,  416,  416,  419,  419,  419,

      419,  419,  419,  419,  419,  419,  419,  419,  419,    0,
      419,  419,  419,  419,  419,  419,  419,  419,  419,  419,
      419,  419,  419,  419,  419,  420,  420,  420,  420,  420,
      420,  420,  420,  420,  420,  420,  420,    0,  420,  420,
      420,  420,  420,  420,  420,  420,  420,  420,  420,  420,
      420,  420,  420,  421,  421,  421,  421,  421,  421,  421,
        0,  421,  421,  421,  421,    0,  421,  421,  421,  421,
      421,  421,  421,  421,  421,  421,  421,  421,  421,  421,
      421,  423,  423,  423,  423,  423,  423,  423,  423,  423,
      423,  423,  423,    0,  423,  423,  423,  423,  423,  423,

      423,  423,  423,  423,  423,  423,  423,  423,  423,  424,
      598,  621,  626,    0,  598,  621,  626,  424,  598,  424,
      598,    0,    0,  621,  626,  424,    0,  424,  424,  424,
      424,  424,  424,  424,  424,  424,  426,  426,  426,  426,
      426,  426,  426,    0,  426,  426,  426,  426,    0,  426,
      426,  426,  426,  426,  426,  426,  426,  426,  426,  426,
      426,  426,  426,  426,  428,  428,  428,  428,  428,  428,
      428,    0,  428,  428,  428,  428,    0,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  429,  610,    0,    0,  429,  610,    0,  429,

      429,  610,  429,  610,  429,  430,  430,  430,  430,  430,
      430,  430,  430,  430,  430,  430,  430,    0,  430,  430,
      430,  430,  430,  430,  430,  430,  430,  430,  430,  430,
      430,  430,  430,  431,  431,  431,  431,  431,  431,  431,
      431,  431,  431,  431,  431,    0,  431,  431,  431,  431,
      431,  431,  431,  431,  431,  431,  431,  431,  431,  431,
      431,  432,  432,  432,  432,  432,  432,  432,    0,  432,
      432,  432,  432,    0,  432,  432,  432,  432,  432,  432,
      432,  432,  432,  432,  432,  432,  432,  432,  432,  433,
        0,  655,    0,  433,  623,  655,  433,  433,  623,  433,

      434,    0,  623,  655,  623,  434,  434,    0,  434,    0,
        0,  434,  434,  434,  435,  435,  435,  435,  435,  435,
      435,    0,  435,  435,  435,  435,    0,  435,  435,  435,
      435,  435,  435,  435,  435,  435,  435,  435,  435,  435,
      435,  435,  436,  436,  436,  436,  436,  436,  436,  436,
      436,  436,  436,  436,    0,  436,  436,  436,  436,  436,
      436,  436,  436,  436,  436,  436,  436,  436,  436,  436,
      438,  438,  438,  438,  438,  438,  438,  438,  438,  438,
      438,  438,    0,  438,  438,  438,  438,  438,  438,  438,
      438,  438,  438,  438,  438,  438,  438,  438,  439,  439,

      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
        0,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  440,  440,  440,  440,
      440,  440,  440,    0,  440,  440,  440,  440,    0,  440,
      440,  440,  440,  440,  440,  440,  440,  440,  440,  440,
      440,  440,  440,  440,  444,  444,  444,  444,  444,  444,
      444,  444,  444,  444,  444,  444,    0,  444,  444,  444,
      444,  444,  444,  444,  444,  444,  444,  444,  444,  444,
      444,  444,  445,    0,    0,    0,  633,  636,    0,    0,
      445,  636,  445,  633,  633,  636,  633,  636,  445,    0,

      445,  445,  445,  445,  445,  445,  445,  445,  445,  447,
      447,  447,  447,  447,  447,  447,    0,  447,  447,  447,
      447,    0,  447,  447,  447,  447,  447,  447,  447,  447,
      447,  447,  447,  447,  447,  447,  447,  448,  448,  448,
      448,  448,  448,  448,  448,  448,  448,  448,  448,    0,
      448,  448,  448,  448,  448,  448,  448,  448,  448,  448,
      448,  448,  448,  448,  448,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,    0,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  450,  450,  450,  450,  450,  450,  450,

      450,  450,  450,  450,  450,    0,  450,  450,  450,  450,
      450,  450,  450,  450,  450,  450,  450,  450,  450,  450,
      450,  454,  454,  454,  454,  454,  454,  454,    0,  454,
      454,  454,  454,    0,  454,  454,  454,  454,  454,  454,
      454,  454,  454,  454,  454,  454,  454,  454,  454,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,    0,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  457,  457,  457,
      457,  457,  457,  457,  457,  457,  457,  457,  457,    0,
      457,  457,  457,  457,  457,  457,  457,  457,  457,  457,

      457,  457,  457,  457,  457,  458,  458,  458,  458,  458,
      458,  458,  458,  458,  458,  458,  458,    0,  458,  458,
      458,  458,  458,  458,  458,  458,  458,  458,  458,  458,
      458,  458,  458,  459,  459,  459,  459,  459,  459,  459,
        0,  459,  459,  459,  459,    0,  459,  459,  459,  459,
      459,  459,  459,  459,  459,  459,  459,  459,  459,  459,
      459,  463,  463,  463,  463,  463,  463,  463,  463,  463,
      463,  463,  463,    0,  463,  463,  463,  463,  463,  463,
      463,  463,  463,  463,  463,  463,  463,  463,  463,  464,
      648,    0,    0,  653,  648,    0,  663,  464,  648,  464,

      648,  653,    0,  653,  663,  464,  663,  464,  464,  464,
      464,  464,  464,  464,  464,  464,  466,  466,  466,  466,
      466,  466,  466,    0,  466,  466,  466,  466,    0,  466,
      466,  466,  466,  466,  466,  466,  466,  466,  466,  466,
      466,  466,  466,  466,  467,  467,  467,  467,  467,  467,
      467,  467,  467,  467,  467,  467,    0,  467,  467,  467,
      467,  467,  467,  467,  467,  467,  467,  467,  467,  467,
      467,  467,  468,  468,  468,  468,  468,  468,  468,  468,
      468,  468,  468,  468,    0,  468,  468,  468,  468,  468,
      468,  468,  468,  468,  468,  468,  468,  468,  468,  468,

      469,  469,  469,  469,  469,  469,  469,  469,  469,  469,
      469,  469,    0,  469,  469,  469,  469,  469,  469,  469,
      469,  469,  469,  469,  469,  469,  469,  469,  471,  471,
      471,  471,  471,  471,  471,    0,  471,  471,  471,  471,
        0,  471,  471,  471,  471,  471,  471,  471,  471,  471,
      471,  471,  471,  471,  471,  471,  472,  472,  472,  472,
      472,  472,  472,    0,  472,  472,  472,  472,    0,  472,
      472,  472,  472,  472,  472,  472,  472,  472,  472,  472,
      472,  472,  472,  472,  473,  659,    0,    0,  473,  659,
        0,  473,  473,  659,  473,  659,  473,  474,  474,  474,

      474,  474,  474,  474,  474,  474,  474,  474,  474,    0,
      474,  474,  474,  474,  474,  474,  474,  474,  474,  474,
      474,  474,  474,  474,  474,  478,  478,  478,  478,  478,
      478,  478,  478,  478,  478,  478,  478,    0,  478,  478,
      478,  478,  478,  478,  478,  478,  478,  478,  478,  478,
      478,  478,  478,  479,  479,  479,  479,  479,  479,  479,
      479,  479,  479,  479,  479,    0,  479,  479,  479,  479,
      479,  479,  479,  479,  479,  479,  479,  479,  479,  479,
      479,  480,  480,  480,  480,  480,  480,  480,    0,  480,
      480,  480,  480,    0,  480,  480,  480,  480,  480,  480,

      480,  480,  480,  480,  480,  480,  480,  480,  480,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,    0,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  484,  665,    0,
      677,  660,  665,    0,  677,  484,    0,  484,  660,  660,
      665,  660,  677,  484,    0,  484,  484,  484,  484,  484,
      484,  484,  484,  484,  486,  486,  486,  486,  486,  486,
      486,    0,  486,  486,  486,  486,    0,  486,  486,  486,
      486,  486,  486,  486,  486,  486,  486,  486,  486,  486,
      486,  486,  487,  487,  487,  487,  487,  487,  487,    0,

      487,  487,  487,  487,    0,  487,  487,  487,  487,  487,
      487,  487,  487,  487,  487,  487,  487,  487,  487,  487,
      488,  669,    0,    0,  488,  669,    0,  488,  488,  669,
      488,  669,  488,  489,  489,  489,  489,  489,  489,  489,
      489,  489,  489,  489,  489,    0,  489,  489,  489,  489,
      489,  489,  489,  489,  489,  489,  489,  489,  489,  489,
      489,  490,  490,  490,  490,  490,  490,  490,  490,  490,
      490,  490,  490,    0,  490,  490,  490,  490,  490,  490,
      490,  490,  490,  490,  490,  490,  490,  490,  490,  493,
      493,  493,  493,  493,  493,  493,    0,  493,  493,  493,

      493,    0,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  494,  494,  494,
      494,  494,  494,  494,  494,  494,  494,  494,  494,    0,
      494,  494,  494,  494,  494,  494,  494,  494,  494,  494,
      494,  494,  494,  494,  494,  495,  495,  495,  495,  495,
      495,  495,  495,  495,  495,  495,  495,    0,  495,  495,
      495,  495,  495,  495,  495,  495,  495,  495,  495,  495,
      495,  495,  495,  496,  496,  496,  496,  496,  496,  496,
      496,  496,  496,  496,  496,    0,  496,  496,  496,  496,
      496,  496,  496,  496,  496,  496,  496,  496,  496,  496,

      496,  499,  499,  499,  499,  499,  499,  499,    0,  499,
      499,  499,  499,    0,  499,  499,  499,  499,  499,  499,
      499,  499,  499,  499,  499,  499,  499,  499,  499,  500,
      500,  500,  500,  500,  500,  500,    0,  500,  500,  500,
      500,    0,  500,  500,  500,  500,  500,  500,  500,  500,
      500,  500,  500,  500,  500,  500,  500,  501,  682,    0,
      689,  687,  682,    0,  689,  501,  682,  501,  682,  687,
        0,  687,  689,  501,    0,  501,  501,  501,  501,  501,
      501,  501,  501,  501,  502,  502,  502,  502,  502,  502,
      502,  502,  502,  502,  502,  502,    0,  502,  502,  502,

      502,  502,  502,  502,  502,  502,  502,  502,  502,  502,
      502,  502,  503,  503,  503,  503,  503,  503,  503,  503,
      503,  503,  503,  503,    0,  503,  503,  503,  503,  503,
      503,  503,  503,  503,  503,  503,  503,  503,  503,  503,
      504,  504,  504,  504,  504,  504,  504,  504,  504,  504,
      504,  504,    0,  504,  504,  504,  504,  504,  504,  504,
      504,  504,  504,  504,  504,  504,  504,  504,  505,  505,
      505,  505,  505,  505,  505,  505,  505,  505,  505,  505,
        0,  505,  505,  505,  505,  505,  505,  505,  505,  505,
      505,  505,  505,  505,  505,  505,  507,  507,  507,  507,

      507,  507,  507,    0,  507,  507,  507,  507,    0,  507,
      507,  507,  507,  507,  507,  507,  507,  507,  507,  507,
      507,  507,  507,  507,  508,  508,  508,  508,  508,  508,
      508,    0,  508,  508,  508,  508,    0,  508,  508,  508,
      508,  508,  508,  508,  508,  508,  508,  508,  508,  508,
      508,  508,  512,  692,  695,    0,    0,  692,  695,  512,
        0,  692,    0,  692,  512,    0,  695,  754,  512,    0,
      512,  512,  512,  512,  512,  512,  512,  512,  512,  513,
      693,  754,  754,  513,    0,    0,  513,  513,  693,  513,
      693,  513,  514,  514,  514,  514,  514,  514,  514,  514,

      514,  514,  514,  514,    0,  514,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,
      515,  515,  515,  515,  515,  515,  515,  515,  515,  515,
      515,  515,    0,  515,  515,  515,  515,  515,  515,  515,
      515,  515,  515,  515,  515,  515,  515,  515,  516,  516,
      516,  516,  516,  516,  516,    0,  516,  516,  516,  516,
        0,  516,  516,  516,  516,  516,  516,  516,  516,  516,
      516,  516,  516,  516,  516,  516,  517,  517,  517,  517,
      517,  517,  517,  517,  517,  517,  517,  517,    0,  517,
      517,  517,  517,  517,  517,  517,  517,  517,  517,  517,

      517,  517,  517,  517,  518,  518,  518,  518,  518,  518,
      518,  518,  518,  518,  518,  518,    0,  518,  518,  518,
      518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
      518,  518,  519,  519,  519,  519,  519,  519,  519,  519,
      519,  519,  519,  519,    0,  519,  519,  519,  519,  519,
      519,  519,  519,  519,  519,  519,  519,  519,  519,  519,
      523,  523,  523,  523,  523,  523,  523,    0,  523,  523,
      523,  523,    0,  523,  523,  523,  523,  523,  523,  523,
      523,  523,  523,  523,  523,  523,  523,  523,  524,  524,
      524,  524,  524,  524,  524,    0,  524,  524,  524,  524,

        0,  524,  524,  524,  524,  524,  524,  524,  524,  524,
      524,  524,  524,  524,  524,  524,  525,  525,  525,  525,
      525,  525,  525,    0,  525,  525,  525,  525,    0,  525,
      525,  525,  525,  525,  525,  525,  525,  525,  525,  525,
      525,  525,  525,  525,  526,  703,    0,    0,  526,  703,
        0,  526,  526,  703,  526,  703,  526,  527,  527,  527,
      527,  527,  527,  527,  527,  527,  527,  527,  527,    0,
      527,  527,  527,  527,  527,  527,  527,  527,  527,  527,
      527,  527,  527,  527,  527,  528,  528,  528,  528,  528,
      528,  528,  528,  528,  528,  528,  528,    0,  528,  528,

      528,  528,  528,  528,  528,  528,  528,  528,  528,  528,
      528,  528,  528,  529,  529,  529,  529,  529,  529,  529,
        0,  529,  529,  529,  529,    0,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  530,  530,  530,  530,  530,  530,  530,  530,  530,
      530,  530,  530,    0,  530,  530,  530,  530,  530,  530,
      530,  530,  530,  530,  530,  530,  530,  530,  530,  531,
      531,  531,  531,  531,  531,  531,  531,  531,  531,  531,
      531,    0,  531,  531,  531,  531,  531,  531,  531,  531,
      531,  531,  531,  531,  531,  531,  531,  532,  532,  532,

      532,  532,  532,  532,  532,  532,  532,  532,  532,    0,
      532,  532,  532,  532,  532,  532,  532,  532,  532,  532,
      532,  532,  532,  532,  532,  538,  704,    0,    0,    0,
        0,    0,  538,  538,  704,  538,  704,  538,  539,  539,
      539,  539,  539,  539,  539,  539,  539,  539,  539,  539,
        0,  539,  539,  539,  539,  539,  539,  539,  539,  539,
      539,  539,  539,  539,  539,  539,  540,    0,    0,    0,
      540,    0,    0,  540,  540,    0,  540,  542,  542,  542,
      542,  542,  542,  542,    0,  542,  542,  542,  542,    0,
      542,  542,  542,  542,  542,  542,  542,  542,  542,  542,

      542,  542,  542,  542,  542,  543,  543,  543,  543,  543,
      543,  543,  543,  543,  543,  543,  543,    0,  543,  543,
      543,  543,  543,  543,  543,  543,  543,  543,  543,  543,
      543,  543,  543,  544,  544,  544,  544,  544,  544,  544,
      544,  544,  544,  544,  544,    0,  544,  544,  544,  544,
      544,  544,  544,  544,  544,  544,  544,  544,  544,  544,
      544,  547,  547,  547,  547,  547,  547,  547,    0,  547,
      547,  547,  547,    0,  547,  547,  547,  547,  547,  547,
      547,  547,  547,  547,  547,  547,  547,  547,  547,  548,
      548,  548,  548,  548,  548,  548,  548,  548,  548,  548,

      548,    0,  548,  548,  548,  548,  548,  548,  548,  548,
      548,  548,  548,  548,  548,  548,  548,  549,  549,  549,
      549,  549,  549,  549,  549,  549,  549,  549,  549,    0,
      549,  549,  549,  549,  549,  549,  549,  549,  549,  549,
      549,  549,  549,  549,  549,  550,  550,  550,  550,  550,
      550,  550,  550,  550,  550,  550,  550,    0,  550,  550,
      550,  550,  550,  550,  550,  550,  550,  550,  550,  550,
      550,  550,  550,  554,  554,  554,  554,  554,  554,  554,
        0,  554,  554,  554,  554,    0,  554,  554,  554,  554,
      554,  554,  554,  554,  554,  554,  554,  554,  554,  554,

      554,  555,  710,    0,  719,  717,    0,    0,  719,  555,
      710,  555,  710,  717,    0,  717,  719,  555,    0,  555,
      555,  555,  555,  555,  555,  555,  555,  555,  556,  556,
      556,  556,  556,  556,  556,  556,  556,  556,  556,  556,
        0,  556,  556,  556,  556,  556,  556,  556,  556,  556,
      556,  556,  556,  556,  556,  556,  559,  559,  559,  559,
      559,  559,  559,  559,  559,  559,  559,  559,    0,  559,
      559,  559,  559,  559,  559,  559,  559,  559,  559,  559,
      559,  559,  559,  559,  560,  560,  560,  560,  560,  560,
      560,  560,  560,  560,  560,  560,    0,  560,  560,  560,

      560,  560,  560,  560,  560,  560,  560,  560,  560,  560,
      560,  560,  561,  561,  561,  561,  561,  561,  561,  561,
      561,  561,  561,  561,    0,  561,  561,  561,  561,  561,
      561,  561,  561,  561,  561,  561,  561,  561,  561,  561,
      563,    0,    0,  756,  563,  724,  725,  563,  563,  563,
      563,  564,    0,  724,  725,  724,  725,  756,  756,    0,
      564,    0,  564,  564,  564,  564,  564,  564,  564,  564,
      564,  565,  565,  565,  565,  565,  565,  565,    0,  565,
      565,  565,  565,    0,  565,  565,  565,  565,  565,  565,
      565,  565,  565,  565,  565,  565,  565,  565,  565,  567,

      567,  567,  567,  567,  567,  567,  567,  567,  567,  567,
      567,    0,  567,  567,  567,  567,  567,  567,  567,  567,
      567,  567,  567,  567,  567,  567,  567,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,    0,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  569,  569,  569,  569,  569,
      569,  569,    0,  569,  569,  569,  569,    0,  569,  569,
      569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
      569,  569,  569,  571,  571,  571,  571,  571,  571,  571,
      571,  571,  571,  571,  571,    0,  571,  571,  571,  571,

      571,  571,  571,  571,  571,  571,  571,  571,  571,  571,
      571,  572,  723,  727,  735,    0,  723,  727,  735,  572,
      723,  572,  723,    0,    0,  727,  735,  572,    0,  572,
      572,  572,  572,  572,  572,  572,  572,  572,  575,  575,
      575,  575,  575,  575,  575,    0,  575,  575,  575,  575,
        0,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  576,  744,  750,    0,
        0,  744,  750,  576,    0,  744,    0,  744,  576,    0,
      750,  778,  576,    0,  576,  576,  576,  576,  576,  576,
      576,  576,  576,  577,  749,  778,  778,  577,    0,    0,

      577,  577,  749,  577,  749,  577,  578,  578,  578,  578,
      578,  578,  578,  578,  578,  578,  578,  578,    0,  578,
      578,  578,  578,  578,  578,  578,  578,  578,  578,  578,
      578,  578,  578,  578,  579,  763,  770,    0,    0,  763,
      770,  768,    0,  763,    0,  763,  579,    0,  770,  768,
      579,  768,  579,  579,  579,  579,  579,  579,  579,  579,
      579,  580,  773,    0,    0,    0,  773,    0,  580,  580,
      773,  580,  773,  580,  581,  581,  581,  581,  581,  581,
      581,  581,  581,  581,  581,  581,    0,  581,  581,  581,
      581,  581,  581,  581,  581,  581,  581,  581,  581,  581,

      581,  581,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,    0,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      583,  583,  583,  583,  583,  583,  583,  583,  583,  583,
      583,  583,    0,  583,  583,  583,  583,  583,  583,  583,
      583,  583,  583,  583,  583,  583,  583,  583,  584,  584,
      584,  584,  584,  584,  584,    0,  584,  584,  584,  584,
        0,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  586,  781,    0,    0,
        0,    0,    0,  586,  586,  781,  586,  781,  586,  587,

      587,  587,  587,  587,  587,  587,  587,  587,  587,  587,
      587,    0,  587,  587,  587,  587,  587,  587,  587,  587,
      587,  587,  587,  587,  587,  587,  587,  588,  776,    0,
        0,  588,  776,  779,  588,  588,    0,  588,  589,    0,
      776,    0,    0,  589,  589,    0,  589,  779,  779,  589,
      589,  589,  590,  590,  590,  590,  590,  590,  590,  590,
      590,  590,  590,  590,    0,  590,  590,  590,  590,  590,
      590,  590,  590,  590,  590,  590,  590,  590,  590,  590,
      591,  591,  591,  591,  591,  591,  591,  591,  591,  591,
      591,  591,    0,  591,  591,  591,  591,  591,  591,  591,

      591,  591,  591,  591,  591,  591,  591,  591,  594,  594,
      594,  594,  594,  594,  594,  594,  594,  594,  594,  594,
        0,  594,  594,  594,  594,  594,  594,  594,  594,  594,
      594,  594,  594,  594,  594,  594,  604,  783,    0,    0,
      788,  783,    0,  604,  604,  604,  604,  605,  788,  783,
      788,    0,    0,    0,    0,    0,  605,    0,  605,  605,
      605,  605,  605,  605,  605,  605,  605,  607,  607,  607,
      607,  607,  607,  607,  607,  607,  607,  607,  607,    0,
      607,  607,  607,  607,  607,  607,  607,  607,  607,  607,
      607,  607,  607,  607,  607,  609,  609,  609,  609,  609,

      609,  609,    0,  609,  609,  609,  609,    0,  609,  609,
      609,  609,  609,  609,  609,  609,  609,  609,  609,  609,
      609,  609,  609,  617,  617,  617,  617,  617,  617,  617,
        0,  617,  617,  617,  617,    0,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  618,  618,  618,  618,  618,  618,  618,  618,  618,
      618,  618,  618,    0,  618,  618,  618,  618,  618,  618,
      618,  618,  618,  618,  618,  618,  618,  618,  618,  627,
      627,  627,  627,  627,  627,  627,  627,  627,  627,  627,
      627,    0,  627,  627,  627,  627,  627,  627,  627,  627,

      627,  627,  627,  627,  627,  627,  627,  631,  631,  631,
      631,  631,  631,  631,  631,  631,  631,  631,  631,    0,
      631,  631,  631,  631,  631,  631,  631,  631,  631,  631,
      631,  631,  631,  631,  631,  634,  634,  634,  634,  634,
      634,  634,  634,  634,  634,  634,  634,    0,  634,  634,
      634,  634,  634,  634,  634,  634,  634,  634,  634,  634,
      634,  634,  634,  641,  641,  641,  641,  641,  641,  641,
      641,  641,  641,  641,  641,    0,  641,  641,  641,  641,
      641,  641,  641,  641,  641,  641,  641,  641,  641,  641,
      641,  644,  644,  644,  644,  644,  644,  644,    0,  644,

      644,  644,  644,    0,  644,  644,  644,  644,  644,  644,
      644,  644,  644,  644,  644,  644,  644,  644,  644,  645,
      645,  645,  645,  645,  645,  645,    0,  645,  645,  645,
      645,    0,  645,  645,  645,  645,  645,  645,  645,  645,
      645,  645,  645,  645,  645,  645,  645,  661,  661,  661,
      661,  661,  661,  661,    0,  661,  661,  661,  661,    0,
      661,  661,  661,  661,  661,  661,  661,  661,  661,  661,
      661,  661,  661,  661,  661,  662,  662,  662,  662,  662,
      662,  662,  662,  662,  662,  662,  662,    0,  662,  662,
      662,  662,  662,  662,  662,  662,  662,  662,  662,  662,

      662,  662,  662,  672,  787,    0,    0,    0,  787,    0,
      672,    0,  787,    0,  787,  672,    0,    0,    0,  672,
        0,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,
      674,  674,    0,  674,  674,  674,  674,  674,  674,  674,
      674,  674,  674,  674,  674,  674,  674,  674,  678,  678,
      678,  678,  678,  678,  678,  678,  678,  678,  678,  678,
        0,  678,  678,  678,  678,  678,  678,  678,  678,  678,
      678,  678,  678,  678,  678,  678,  699,  790,    0,    0,
        0,    0,    0,    0,    0,  790,    0,  790,  699,    0,

        0,    0,  699,    0,  699,  699,  699,  699,  699,  699,
      699,  699,  699,  700,    0,    0,    0,  700,    0,    0,
      700,  700,    0,  700,    0,  700,  701,  701,  701,  701,
      701,  701,  701,  701,  701,  701,  701,  701,    0,  701,
      701,  701,  701,  701,  701,  701,  701,  701,  701,  701,
      701,  701,  701,  701,  706,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  706,    0,    0,    0,
      706,    0,  706,  706,  706,  706,  706,  706,  706,  706,
      706,  707,    0,    0,    0,  707,    0,    0,  707,  707,
        0,  707,    0,  707,  708,  708,  708,  708,  708,  708,

      708,  708,  708,  708,  708,  708,    0,  708,  708,  708,
      708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
      708,  708,  713,    0,    0,    0,  713,    0,    0,  713,
        0,  713,    0,    0,  713,  714,  714,  714,  714,  714,
      714,  714,  714,  714,  714,  714,  714,    0,  714,  714,
      714,  714,  714,  714,  714,  714,  714,  714,  714,  714,
      714,  714,  714,  715,  715,  715,  715,  715,  715,  715,
      715,  715,  715,  715,  715,    0,  715,  715,  715,  715,
      715,  715,  715,  715,  715,  715,  715,  715,  715,  715,
      715,  728,  728,  728,  728,  728,  728,  728,  728,  728,

      728,  728,  728,    0,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  732,
      732,  732,  732,  732,  732,  732,  732,  732,  732,  732,
      732,    0,  732,  732,  732,  732,  732,  732,  732,  732,
      732,  732,  732,  732,  732,  732,  732,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,    0,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,    0,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,

      739,  739,  739,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,    0,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,    0,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  755,
        0,    0,    0,  755,    0,    0,    0,  755,    0,  755,
        0,    0,    0,  755,  755,  760,  760,  760,  760,  760,
      760,  760,  760,  760,  760,  760,  760,    0,  760,  760,
      760,  760,  760,  760,  760,  760,  760,  760,  760,  760,

      760,  760,  760,  792,  792,  792,  792,  792,  792,  792,
      792,  792,  792,  792,  792,  792,  792,  793,    0,    0,
        0,    0,    0,    0,    0,    0,  793,    0,  793,  794,
        0,  794,  794,    0,  794,    0,  794,    0,  794,    0,
      794,  794,  795,    0,    0,  795,    0,  795,    0,  795,
        0,  795,    0,  795,  795,  796,    0,    0,    0,    0,
      796,    0,  796,    0,  796,    0,  796,  797,  797,  797,
      797,  797,    0,  797,  797,  797,    0,  797,  797,  797,
      797,  798,  798,  798,  798,  798,    0,  798,  798,  798,
        0,  798,  798,  798,  798,  799,    0,    0,  799,    0,

      799,    0,  799,    0,  799,    0,  799,  799,  800,    0,
        0,    0,    0,  800,    0,  800,    0,  800,  800,  800,
      801,  801,  801,  801,  801,  801,  801,  801,  801,    0,
      801,  801,  801,  801,  802,  802,  802,  802,  802,  802,
      802,  802,  802,    0,  802,  802,  802,  802,  803,    0,
        0,    0,    0,    0,    0,    0,    0,  803,    0,  803,
      804,    0,  804,  804,    0,  804,    0,  804,    0,  804,
        0,  804,  804,  805,  805,  805,  805,  805,  805,  805,
      805,  805,    0,  805,  805,  805,  805,  806,  806,  806,
      806,  806,  806,  806,  806,  806,    0,  806,  806,  806,

      806,  807,  807,  807,  807,  807,  807,  807,  807,  807,
        0,  807,  807,  807,  807,  808,  808,  808,  808,  808,
      808,  808,  808,  808,    0,  808,  808,  808,  808,  809,
        0,    0,  809,    0,  809,    0,  809,    0,  809,    0,
      809,  809,  810,  810,  810,  810,  810,    0,  810,  810,
      810,    0,  810,  810,  810,  810,  812,  812,  812,  812,
      812,  812,  812,  812,  812,    0,  812,  812,  812,  812,
      814,  814,  814,  814,  814,  814,  814,  814,  814,    0,
      814,  814,  814,  814,  815,  815,  815,  815,  815,    0,
      815,  815,  815,    0,  815,  815,  815,  815,  816,    0,

        0,  816,    0,  816,    0,  816,    0,  816,    0,  816,
      816,  817,  817,  817,  817,  817,  817,  817,  817,  817,
        0,  817,  817,  817,  817,  818,  818,    0,  818,  818,
        0,  818,    0,  818,  818,  819,  819,  819,  819,  819,
      819,  819,  819,  819,    0,  819,  819,  819,  819,  820,
      820,    0,  820,  820,    0,  820,    0,  820,  820,  821,
      821,  821,  821,  821,  821,  821,  821,  821,    0,  821,
      821,  821,  821,  822,  822,  822,  822,  822,  822,  822,
      822,  822,    0,  822,  822,  822,  822,  823,  823,  823,
      823,  823,  823,  823,  823,  823,    0,  823,  823,  823,

      823,  824,  824,  824,  824,  824,  824,  824,  824,  824,
        0,  824,  824,  824,  824,  825,  825,  825,  825,  825,
        0,  825,  825,  825,    0,  825,  825,  825,  825,  826,
      826,    0,  826,  826,  826,  826,  826,  826,  826,  826,
      826,  826,  826,  827,  827,  827,  827,  827,    0,  827,
      827,  827,    0,  827,  827,  827,  827,  828,  828,  828,
      828,  828,  828,  828,  828,  828,    0,  828,  828,  828,
      828,  829,  829,  829,  829,  829,  829,  829,  829,  829,
        0,  829,  829,  829,  829,  831,  831,  831,  831,  831,
      831,  831,  831,  831,    0,  831,  831,  831,  831,  832,

      832,  832,  832,  832,  832,  832,  832,  832,    0,  832,
      832,  832,  832,  833,  833,  833,  833,  833,  833,  833,
      833,  833,    0,  833,  833,  833,  833,  835,  835,  835,
      835,  835,  835,  835,  835,  835,    0,  835,  835,  835,
      835,  836,  836,    0,  836,  836,    0,  836,    0,  836,
      836,  837,  837,  837,  837,  837,  837,  837,  837,  837,
        0,  837,  837,  837,  837,  838,  838,  838,  838,  838,
      838,  838,  838,  838,    0,  838,  838,  838,  838,  839,
      839,  839,  839,    0,  839,  839,  839,  839,    0,  839,
      839,  839,  839,  840,  840,    0,  840,  840,  840,  840,

      840,  840,  840,  840,  840,  840,  840,  841,  841,  841,
      841,  841,  841,  841,  841,  841,    0,  841,  841,  841,
      841,  842,  842,  842,  842,    0,  842,  842,  842,  842,
        0,  842,  842,  842,  842,  843,  843,  843,  843,    0,
      843,  843,  843,  843,    0,  843,  843,  843,  843,  844,
      844,    0,  844,  844,    0,  844,    0,  844,  844,  845,
      845,  845,  845,    0,  845,  845,  845,  845,    0,  845,
      845,  845,  845,  846,  846,  846,  846,  846,  846,  846,
      846,  846,    0,  846,  846,  846,  846,  847,  847,  847,
      847,  847,  847,  847,  847,  847,    0,  847,  847,  847,

      847,  848,  848,  848,  848,  848,    0,  848,  848,  848,
        0,  848,  848,  848,  848,  850,  850,    0,  850,  850,
        0,  850,    0,  850,  850,  851,  851,  851,  851,    0,
      851,  851,  851,  851,    0,  851,  851,  851,  851,  852,
      852,  852,  852,    0,  852,  852,  852,  852,    0,  852,
      852,  852,  852,  853,  853,  853,  853,    0,  853,  853,
      853,  853,    0,  853,  853,  853,  853,  854,  854,  854,
      854,    0,  854,  854,  854,  854,    0,  854,  854,  854,
      854,  855,  855,  855,  855,  855,    0,  855,  855,  855,
        0,  855,  855,  855,  855,  857,  857,    0,  857,  857,

        0,  857,    0,  857,  857,  858,  858,  858,  858,    0,
      858,  858,  858,  858,    0,  858,  858,  858,  858,  859,
      859,  859,  859,  859,  859,  859,  859,  859,    0,  859,
      859,  859,  859,  860,  860,  860,  860,    0,  860,  860,
      860,  860,    0,  860,  860,  860,  860,  861,  861,  861,
      861,    0,  861,  861,  861,  861,    0,  861,  861,  861,
      861,  862,  862,  862,  862,    0,  862,  862,  862,  862,
        0,  862,  862,  862,  862,  863,  863,  863,  863,    0,
      863,  863,  863,  863,    0,  863,  863,  863,  863,  864,
      864,  864,  864,    0,  864,  864,  864,  864,    0,  864,

      864,  864,  864,  865,  865,  865,  865,    0,  865,  865,
      865,  865,    0,  865,  865,  865,  865,  866,  866,  866,
      866,    0,  866,  866,  866,  866,    0,  866,  866,  866,
      866,  867,  867,  867,  867,  867,  867,  867,  867,  867,
        0,  867,  867,  867,  867,  868,  868,  868,  868,    0,
      868,  868,  868,  868,    0,  868,  868,  868,  868,  869,
      869,  869,  869,  869,  869,  869,  869,  869,    0,  869,
      869,  869,  869,  870,  870,  870,  870,    0,  870,  870,
      870,  870,    0,  870,  870,  870,  870,  871,  871,  871,
      871,    0,  871,  871,  871,  871,    0,  871,  871,  871,

      871,  872,  872,  872,  872,    0,  872,  872,  872,  872,
        0,  872,  872,  872,  872,  873,  873,  873,  873,  873,
      873,  873,  873,  873,    0,  873,  873,  873,  873,  874,
      874,  874,  874,    0,  874,  874,  874,  874,    0,  874,
      874,  874,  874,  875,  875,  875,  875,    0,  875,  875,
      875,  875,    0,  875,  875,  875,  875,  876,  876,  876,
      876,    0,  876,  876,  876,  876,    0,  876,  876,  876,
      876,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791

    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "caspconverter.l"


#line 25 "caspconverter.l"
#include "casp/caspconverter.h"
#include "casp/utility.h"
#include <iostream>
#include <string>
#include <sstream>
#include <vector>
#include <unordered_map>
#include <exception>

#include <boost/foreach.hpp>
#include <boost/algorithm/string/predicate.hpp>
#include <boost/algorithm/string.hpp>
#include <boost/tokenizer.hpp>

using namespace std;

bool syntaxCheckCnsAtm(string s, int LineNum)
{
    int p = 0, c = 0;
//    if(s[0]=='$'||isComparison(s[0]||isBinOperator(s[0]))){
//        cerr  << "Line " << LineNum << ": In constraint atom '" << s << "', first symbol is '" << s[0] << "'. Linear expressions must not start with an operator, please fix it (maybe begin with a zero is a good idea).";
//
//        return 1;
//    }
    for(int i=0;i<s.length();i++){
        if(!isValidConstraintSym(s[i])) { cerr << "Line " << LineNum << ": Invalid symbol '" << s[i] << "' in constraint atom '" << s << "'.";  return 1;}
        if(s[i]=='{') { p++; }
        if(s[i]=='}') { p--; if(p<0){ cerr << "Line " << LineNum << ": Unbalanced parenthesis in constraint atom'" << s << "'.";  return 1; }}
        if(s[i]=='$' && ( !isComparison(s[i+1]) && !isBinOperator(s[i+1]) || i+1==s.length() )){
            cerr << "Line " << LineNum << ": Invalid operator symbol '" << s[i] << "' in constraint atom '" << s << "'.";
            return 1;
        }
        if( isComparison( s[i] ) ){
            c++;
            if(c>2){
                cerr << "Line " << LineNum << ": Constraint atom '" << s << "' has more than two comparison symbols.";

                return 1;
            }
            if(c==2 && (s[i]!='='||!isComparison(s[i-1]))){
                cerr << "Line " << LineNum << ": Invalid comparison symbol '" << s[i-1] << s[i] << "' in constraint atom '" << s << "'.";

                return 1;
            }
            if(s[i]=='!' && ( i+1==s.length() || s[i+1]!='=')){
                cerr << "Line " << LineNum << ": Invalid comparison symbol '" << s[i] << s[i+1] << "' in constraint atom '" << s << "'.";

                return 1;
            }
        }
    }
    if(isBinOperator(s.back()) || isComparison(s.back()) || s.back()=='$'){
        cerr <<"Line " << LineNum << ": Constraint atom '" << s << "' ends with symbol '" << s.back() <<"'.";

        return 1;
    }
    if(c<1){
        cerr << "Line " << LineNum << ": Missing comparison operator in constraint atom '" << s << "'.";

        return 1;
    }
    if(p!=0){
        cerr << "Line " << LineNum << ": Unbalanced parenthesis in constraint atom '" << s << "'.";

        return 1;
    }

    return 0;
}

int CnsNum = 0, LineNum = 1, VarNum = 0, iii = 0, len = 0, dcn = 0, Ref = 0, arity = 0;
bool flag = 0; /*body = 0;*/
char * tmp;
string info = "", TMPS = "";
stringstream out;
stringstream expr_id;
stringstream expr_str;

unordered_map<int,vector<string>> depmap = {};
unordered_map<string,int> varids = {};
unordered_map<string,int> cnsids = {};
unordered_map<int,int> arityof = {};

Canonizer dummycanon;


#line 2763 "caspconverter.cpp"

#define INITIAL 0
#define QUOTEDSTRING 1
#define COMMENT 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 113 "caspconverter.l"


#line 2873 "caspconverter.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 792 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 8972 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 115 "caspconverter.l"
{ BEGIN(COMMENT); ECHO; }
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 117 "caspconverter.l"
{ ++LineNum; BEGIN(INITIAL);}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 122 "caspconverter.l"
{ BEGIN(QUOTEDSTRING); ECHO; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 124 "caspconverter.l"
{ BEGIN(INITIAL);}
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 128 "caspconverter.l"
{ ++LineNum; ECHO; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 130 "caspconverter.l"
{ /**yyout << "DOM FOUND: " << YYText() << endl;*/
                                            for(int k=1;k<YYLeng();k++){ if(YYText()[k]==')'){ *yyout << "\"";} *yyout << YYText()[k]; if(YYText()[k]=='('){ *yyout << "\"";}}}
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 133 "caspconverter.l"
{

          //cout << endl << "CONSTRAINT FOUND: |" << YYText() << "|" << endl;

        dcn = 0; arity = 0; out.str(string()); expr_id.str(string()); expr_str.str(string());
        tmp = new char [YYLeng()]; tmp = strdup(YYText()); len = 0;
        for(int k=0;k<YYLeng();k++){
            if(tmp[k] != ' ' && tmp[k] != '\t' && tmp[k] != '\0'){ len++; }
            if(tmp[k] == '$'){ dcn++;}
        }
        for(int k=0;k<YYLeng();k++){
            /** Change this section accordingly with the fashion you prefer for the constraint string in output: */
            if(tmp[k] != ' ' && tmp[k] != '\t'){
                /*if(tmp[k]=='$'){out << ' ';}*/
                /*else{out << tmp[k];}*/ /** Print space in place of $ */
                if(tmp[k] == '$'){ out << '$';}  /** Print null char in place of $ */
                else if(tmp[k] == '('){ out << '{';}
                else if(tmp[k] == ')'){ out << '}';}
                else if(tmp[k] == ','){ out << ';';}
                else { out << tmp[k];}
                len--;
                if(len==0){break;}
            }
        }
         /** Syntax check for constraint atoms: */
        TMPS=out.str();

        if(syntaxCheckCnsAtm(TMPS,LineNum)){ cerr << endl << "CASPplugin syntax error" << endl; throw logic_error("Syntax error in constraint atom."); /*throw dlvhex::PluginError("\n CASPplugin syntax error! \n");*/}


        for(int k=0;k<TMPS.length();k++){ if(TMPS[k]=='$'){ TMPS.erase(TMPS.begin()+k); } }

        dummycanon.clear();
        TMPS = dummycanon.canonicalForm(TMPS);
        info = TMPS;
        //cout << "TMPS in canonical form: " << TMPS << endl;
        //info = dummycanon.generalizeNongroundExpr(TMPS);
        //cout << "\tinfo = " << info << endl;

        if(cnsids.count(info)==0){ CnsNum++; cnsids.insert({info,CnsNum}); arityof.insert({CnsNum,0}); vector<string> vars; depmap.insert({CnsNum,vars});}
        Ref = cnsids[info];

        expr_id << "expr_" << Ref << "_";
        expr_str << "(\"" << TMPS << "\"";


        boost::char_separator<char> sep("+-*/=<>! ", "", boost::drop_empty_tokens);
        boost::tokenizer<boost::char_separator<char> > tokens(TMPS, sep);

        for ( boost::tokenizer<boost::char_separator<char> >::iterator it = tokens.begin(); it != tokens.end(); ++it) {
            string tok = *it;
            boost::replace_all(tok,"{","(");
            boost::replace_all(tok,"}",")");
            boost::replace_all(tok,";",",");
            if(!isNumberOrPar(tok)){
                //cout << endl << "VARIABLE FOUND: " << tok << endl;
                expr_str << "," << extractVariables(tok,arity); /*nguess << extractVariables(out.str());*/
                string tokvars = generalizeVariables(tok); /*cout << endl << TMPS << endl;*/
                if(tokvars!="?"){
                    depmap.at(Ref).push_back(tokvars);
                    if(varids.count(tokvars) == 0){
                        varids.insert({tokvars,VarNum}); VarNum++;
                    }
                }
            }
        }
        expr_str << ")";
        //expr_id << arity;

        *yyout << expr_id.str() << arity << expr_str.str();
        //cout << "CONVERTED: " << expr_id.str() << arity << expr_str.str();
        //cout << "Wrote: " << expr_id.str() << expr_str.str();
        //int foo=0;
        //string genvs = extractVariables(info,foo);
        //genvs = expr_id.str() + "(\"" + info + "\"," + genvs + ")";
        //cout << "genvs = " << genvs << endl;
        //canon.addExpression(info,genvs);

        //canon.printvarIDs();

        arityof.at(Ref) = arity;

        delete tmp; out.str(string());
    }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 219 "caspconverter.l"
ECHO;
	YY_BREAK
#line 3083 "caspconverter.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(QUOTEDSTRING):
case YY_STATE_EOF(COMMENT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 792 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 792 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 791);

	return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

extern "C" int isatty (int );

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 219 "caspconverter.l"



DefaultConverter::DefaultConverter() {
}

DefaultConverter::~DefaultConverter() {
}

void DefaultConverter::convert(istream& i, ostream& o) {
	string input;
	while (getline(i, input)) {
		o << input << endl;
	}
}

CaspConverter::CaspConverter() {

}

CaspConverter::~CaspConverter() {

}



void CaspConverter::convert(istream& i, ostream& o)
{
    cout << "\nHello! Using modified caspconverter..." << endl;

    istream * inp = &i; ostream * outp = &o;


    /** Flex scanner call: */
    FlexLexer* lexer = new yyFlexLexer;
    while(lexer->yylex(inp, outp) != 0);


/*    canon.printExpressions();

    o << "% Nonground nogoods derived by converter:" << endl;
    o << canon.analize() << endl << "% End of nogoods from converter." << endl;

    canon.printExpressions();
    canon.printvarIDs();*/

    /** Build the constraint/variables dependency map 'Map': */
    unordered_map<int,vector<bool>> Map = {};
    for (int h=1; h<depmap.size()+1; h++){ vector<bool> vbool; Map.insert({h,vbool}); for (int j=0;j<VarNum;j++){ Map.at(h)[j] = 0;}}

    for(int i=1;i<=CnsNum;i++){
        for(int j=0;j<depmap[i].size();j++){
            Map.at(i)[varids.at(depmap.at(i)[j])] = 1;
        }
    }

    /** Uncomment to print Map: */
//    cout << "\n\nMatrice delle adiacenze:" << endl;
//    for ( auto it = Map.begin(); it != Map.end(); ++it ){
//        cout << "{" << it->first << ": ";
//        for (int j=0;j<VarNum;j++){
//            cout << it->second[j] << " ";
//        }
//        cout << "}" << endl;
//    }

    /** Uncomment to print varids (Variables IDentificators): */
//    cout << "\nVarIDs:" << endl;
//    for ( auto it = varids.begin(); it != varids.end(); ++it ){
//        cout << it->second << ": " << it->first << endl;
//    }

    /** Constraints' interdependence analysis: */
    bool erased = 1, matched = 0;
    vector<int> list; len = 1;
    while( Map.size() != 0 ){
        while( Map.count(len) == 0 ){ len++; }
        erased = 0;
        if( Map.size() == 1 ){
            list.push_back(len);
            Map.erase(len);
            break;
        }
        for(int i=len+1; i<CnsNum+1; i++){
            matched = 0;
            if( Map.count(i) != 0){
                for(int j=0; j<VarNum; j++){
                    if(matched) {break;}
                    if( Map.at(len)[j] && Map.at(i)[j] ){
                        matched = 1;
                        for(int k=j+1; k<VarNum; k++){
                            if(Map.at(i)[k]){
                                Map.at(len)[k] = 1;
                                Map.at(i)[k] = 0;
                            }
                        }
                    }
                }
                if(matched){
                    list.push_back(i);
                    Map.erase(i);
                    erased = 1;
                }
            }
        }
        if(!erased){
            list.push_back(len);
            list.push_back(0);
            Map.erase(len);
            len++;
        }
    }
    /** Uncomment to print Map (which now should be empty):
    cout << "\n\nMatrice delle adiacenze:" << endl;
    for ( auto it = Map.begin(); it != Map.end(); ++it ){
        cout << "{" << it->first << ": ";
        for (int j=0;j<VarNum;j++){
            cout << it->second[j] << " ";
        }
        cout << "}" << endl;
    }
    /** Uncomment to print the the vector 'list' (groups of constraints separed by zeroes, each group is independent of the other):
    cout << "\n\nLIST = ";for(int h=0; h<list.size(); h++){cout << list[h] << " ";} cout << endl;*/
    /*cout << "\n\nArities:" << endl;
    for ( auto it = arityof.begin(); it != arityof.end(); ++it ){
        cout << it->first << ": " << it->second << endl;
    }*/

    /** Print the hex calls on the output stream: */
    iii=0;
    while(iii<list.size()){
        o << "\n:- not &casp[domain,maximize,minimize";
        while(list[iii]!=0 && iii<list.size()){
            *outp << ",expr_" << list[iii] << "_" << arityof.at(list[iii]) << ",not_expr_" << list[iii] << "_" << arityof.at(list[iii]);
            iii++;
        }
        for (int h=0; h<15; h++){ o << ",dummy_sum_predicate" << h;}
        o << "]()." << endl;
        iii++;
    }
    /** End of 'convert' */
    return;
}

