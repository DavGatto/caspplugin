% Declarative encoding 

%Part 1. General declaration
position(X) :- X >= 0, X<N, #int(X), num(N).
coloredPos(X) :- X >= 1, X<N, #int(X), num(N).
leaf(L) :- leafWeightCardinality(L,W,C).

% Assign each leaf a position
leafPos(L,P) v not_leafPos(L,P) :- position(P), leaf(L).
:- leafPos(L,N), leafPos(L,N2), N != N2.
:- leafPos(L,N), leafPos(L2,N), L != L2.
someLeafPosition(L) :- leafPos(L,P).
:- not someLeafPosition(L), leaf(L).

%Part 2: Assign each position a color
posColor(P,C) v not_posColor(P,C) :- color(C), coloredPos(P).
:- posColor(P,C), posColor(P,C2), C != C2.
somePosColor(P) :- posColor(P,C).
:- not somePosColor(P), coloredPos(P).

%Part 3, Cost of each position : red, blue, green colors in order
posCost(0, Cost) :- leafWeightCardinality (L, Cost, C), leafPos(L, 0).

posCost(P, Cost) :- coloredPos(P), posColor(P, red), leafPos(L, P), leafWeightCardinality (L, W, C), PreP = P - 1, posCost(PreP, PreCost), Cost = PreCost + W.
posCost(P, Cost) :- coloredPos(P), posColor(P, green), leafPos(L, P), leafWeightCardinality (L, W, C), PreP = P - 1, posCost(PreP, PreCost), Cost = PreCost + C.
posCost(P, Cost) :- coloredPos(P), posColor(P, blue), leafPos(L, P), leafWeightCardinality (L, W, C), PreP = P - 1, posCost(PreP, PreCost), Cost = W + C.

%Part 4. Get total cost
seqCost(1, Cost) :- posCost(1, Cost).
seqCost(P, Cost) :- coloredPos(P), P > 1, PreP = P-1, seqCost(PreP,C), posCost(P,PreC), Cost = C + PreC.

%Part 5
exists :- PreN = N-1, seqCost(PreN, Cost), num(N), Cost <= M, max_total_weight(M).
:- not exists.

leafWeightCardinality(1,5,2).
leafWeightCardinality(2,2,5).
leafWeightCardinality(3,4,6).
leafWeightCardinality(4,5,6).
leafWeightCardinality(5,2,6).
leafWeightCardinality(6,4,2).
leafWeightCardinality(7,3,9).
leafWeightCardinality(8,9,7).
leafWeightCardinality(9,4,3).
leafWeightCardinality(10,7,5).
leafWeightCardinality(11,7,1).
num(11).
#maxint=11.
max_total_weight(81).
color(red).
color(green).
color(blue).
